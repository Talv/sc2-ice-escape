static void sf_ctrl_controller_destroy_internal(int cl_id, structref<sf_ctrl_controller_t> ctl)
{
    int i;

    // TODO: use funcrefs
    // route
    if (ctl.type == SF_CTRL_TYPE_ROUTE) {
        for (i = 0; i < ctl.route.action_count; i += 1) {
            ctl.route.actions[i].abil = null;
            ctl.route.actions[i].pos = null;
        }
        ctl.route.loop = 0;
        ctl.route.action_count = 0;
        ctl.route.reset_on_idle = false;
        ctl.route.loop = SF_CTRL_ROUTE_LOOP_NO;
    }
    // zone random
    else if (ctl.type == SF_CTRL_TYPE_ZONE_RANDOM) {
        sf_ctrl_zone_random_cleanup(cl_id);
    }
    // zone stalker
    else if (ctl.type == SF_CTRL_TYPE_ZONE_STALKER) {
        sf_ctrl_zone_stalker_destroy(cl_id);
    }
    // executor
    else if (ctl.type == SF_CTRL_TYPE_EXECUTOR) {
        sf_ctrl_executor_destroy(cl_id);
    }

    ctl.type = -1;
    ctl.enabled = false;
    ctl.ugroup = null;
    ctl.newly_added = null;
}

void sf_ctrl_mod_init()
{
    int i;

    for (i = 0; i < SF_CTRL_CONTROLLER_MAX; i += 1) {
        sf_ctrl_controllers[i].type = -1;
    }

    TriggerCreate("sf_ctrl_on_route_periodic");
    TriggerCreate("sf_ctrl_on_route_idle_unit");
    TriggerAddEventTimePeriodic(TriggerFind("sf_ctrl_on_route_periodic"), TICK_PERIOD * 18, c_timeGame);
    TriggerAddEventUnitBecomesIdle(TriggerFind("sf_ctrl_on_route_idle_unit"), null, true);
}

void sf_ctrl_mod_cleanup()
{
    int i;

    sf_ctrl_executor_cleanup();
    sf_ctrl_zone_stalker_cleanup();
    for (i = 0; i < SF_CTRL_CONTROLLER_MAX; i += 1) {
        if (sf_ctrl_controllers[i].type == -1) { continue; }
        sf_ctrl_controller_destroy_internal(i, sf_ctrl_controllers[i]);
    }
}

int sf_ctrl_controller_create(int cl_type)
{
    int i;

    for (i = 0; i < SF_CTRL_CONTROLLER_MAX; i += 1) {
        if (sf_ctrl_controllers[i].type != -1) { continue; }

        sf_ctrl_controllers[i].type = cl_type;
        sf_ctrl_controllers[i].enabled = true;
        sf_ctrl_controllers[i].ugroup = UnitGroupEmpty();
        sf_ctrl_controllers[i].newly_added = UnitGroupEmpty();
        DataTableSetInt(false, "sf_ctrl_controller", i);
        return i;
    }

    return -1;
}


void sf_ctrl_controller_destroy(int cl_id)
{
    sf_ctrl_controller_destroy_internal(cl_id, sf_ctrl_controllers[cl_id]);
}

int sf_ctrl_controller_get_from_unit(unit munit)
{
    return FixedToInt(UnitGetCustomValue(munit, UNIT_CUSTOM_CONTROLLER_ID)) - 1;
}

int sf_ctrl_controller_last_created()
{
    return DataTableGetInt(false, "sf_ctrl_controller");
}

int sf_ctrl_controller_clone(int origin_cl_id)
{
    structref<sf_ctrl_controller_t> origin_ctl;
    structref<sf_ctrl_controller_t> new_ctl;
    int new_cl_id;

    origin_ctl = sf_ctrl_controllers[origin_cl_id];

    new_cl_id = sf_ctrl_controller_create(origin_ctl.type);
    new_ctl = sf_ctrl_controllers[new_cl_id];

    // TODO: route clone
    // TODO: zone clone

    return new_cl_id;
}

void sf_ctrl_controller_set_enabled(int cl_id, bool enabled)
{
    sf_ctrl_controllers[cl_id].enabled = enabled;
}

bool sf_ctrl_controller_get_enabled(int cl_id)
{
    return sf_ctrl_controllers[cl_id].enabled;
}

void sf_ctrl_controller_dettach_unit(int cl_id, unit munit)
{
    UnitGroupRemove(sf_ctrl_controllers[cl_id].ugroup, munit);
    UnitGroupRemove(sf_ctrl_controllers[cl_id].newly_added, munit);
    UnitSetCustomValue(munit, UNIT_CUSTOM_CONTROLLER_ID, -1);
}

void sf_ctrl_controller_attach_unit(int cl_id, unit munit)
{
    // TODO: use funcrefs
    if (sf_ctrl_controllers[cl_id].type == SF_CTRL_TYPE_ROUTE) {
        sf_ctrl_route_commit_unit(cl_id, munit, 0);
    }
    else if (sf_ctrl_controllers[cl_id].type == SF_CTRL_TYPE_ZONE_RANDOM) {
        sf_ctrl_zone_random_append_unit(cl_id, munit, false);
    }
}

void sf_ctrl_controller_attach_unit_group(int cl_id, unitgroup ugroup)
{
    int i;

    for (i = 1; i < UnitGroupCount(ugroup, c_unitCountAll); i += 1) {
        sf_ctrl_controller_attach_unit(cl_id, UnitGroupUnit(ugroup, 1));
    }
}

