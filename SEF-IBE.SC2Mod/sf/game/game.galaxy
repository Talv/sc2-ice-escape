static bool gm_restartInitiated = false;
static bool sf_game_first_restart = true;

void gm_spawnPlayers() {
    int i;
    structref<HERO> hero;

    if (UnitGroupCount(gm_herogroup, c_unitCountAll) == 0) {
        for (i = 1; i <= MAX_PLAYERS; i += 1) {
            if (!gm_players[i].active) { continue; }
            gm_spawnHero(gm_players[i].hero, HERO_POSITION_CHANGE_REASON_NEW_MAP);
        }
    }
    else {
        for (i = 1; i <= UnitGroupCount(gm_herogroup, c_unitCountAll); i += 1) {
            hero = gm_players[gm_getPlayerByUnit(UnitGroupUnit(gm_herogroup, i))].hero;
            gm_spawnHero(hero, HERO_POSITION_CHANGE_REASON_NEW_MAP);
        }
    }
}

void sf_game_init() {

    initTextureMap();

    if (GameIsTestMap(false)) {
        sf_core_logger_setup();
    }
}

void sf_game_load_up()
{
    int i;
    int playerId;

    TriggerAddEventPlayerLeft(TriggerCreate("gm_onPlayerLeave"), c_playerAny, c_gameResultUndecided);
    TriggerAddEventUnitClick(TriggerCreate("sf_game_on_unit_clicked"), null, c_playerAny);
    if (GameIsTestMap(false)) {
        TriggerAddEventMouseClicked(TriggerCreate("sf_game_on_mouse"), c_playerAny, c_mouseButtonMiddle, true);
    }
    sf_game_abil_init();

    gm_timer = TimerCreate();
}

void sf_game_reset() {
    int i;

    if (lv_current != -1) {
        gm_restartInitiated = false;
        lv_releaseCurrent();

        sf_stat_session_clear();
        for (i = 1; i <= MAX_PLAYERS; i += 1) {
            if (!gm_players[i].active) { continue; }
            gm_players[i].active = false;
            gm_players[i].ingame = false;
            hr_clearSlot(gm_players[i].hero);
        }
        UnitGroupClear(gm_herogroup);
        Wait(TICK_PERIOD, c_timeGame);
    }

    sf_core_event_prepare("game_reset");
    sf_core_event_send();
}

void sf_game_prepare(playergroup pgroup) {
    int i;
    int l;
    int playerId;
    int secondPlayerId;

    if (pgroup == null) {
        pgroup = PlayerGroupActive();
        for (i = 2; i <= MAX_PLAYERS; i += 1) {
            PlayerGroupAdd(pgroup, i);
        }
    }

    //
    for (i = 1; i <= PlayerGroupCount(pgroup); i += 1) {
        playerId = PlayerGroupPlayer(pgroup, i);
        gm_players[playerId].active = true;
        gm_players[playerId].ingame = true;
        gm_players[playerId].human = false;
        gm_players[playerId].hero.player = playerId;

        if (PlayerType(playerId) == c_playerTypeUser) {
            gm_players[playerId].human = true;
        }

        for (l = 1; l <= PlayerGroupCount(pgroup); l += 1) {
            secondPlayerId = PlayerGroupPlayer(pgroup, l);
            if (playerId == secondPlayerId) { continue; }

            PlayerSetAlliance(playerId, c_allianceIdChat, secondPlayerId, true);
            PlayerSetAlliance(playerId, c_allianceIdVision, secondPlayerId, true);
            PlayerSetAlliance(playerId, c_allianceIdSeekHelp, secondPlayerId, true);
            PlayerSetAlliance(playerId, c_allianceIdGiveHelp, secondPlayerId, true);
            PlayerSetAlliance(playerId, c_allianceIdPassive, secondPlayerId, true);
            PlayerSetAlliance(playerId, c_allianceIdDefeat, secondPlayerId, true);

            if (PlayerType(playerId) == c_playerTypeComputer || PlayerType(playerId) == c_playerTypeNone) {
                PlayerSetAlliance(playerId, c_allianceIdControl, secondPlayerId, true);
                PlayerSetAlliance(playerId, c_allianceIdSpend, secondPlayerId, true);
            }
        }
    }

    //
    for (i = 1; i <= PlayerGroupCount(PlayerGroupAll()); i += 1) {
        playerId = PlayerGroupPlayer(PlayerGroupAll(), i);
        VisExploreArea(playerId, RegionEntireMap(), false, false);
    }
    Wait(0.0, c_timeGame);

    sf_core_event_prepare("game_load");
    sf_core_event_send();
}

void sf_game_begin(int chal_id)
{
    TimerStart(gm_timer, c_timerDurationInfinite, false, c_timeReal);

    TriggerAddEventTimePeriodic(TriggerCreate("gm_onTimerRefresh"), 1.0, c_timeReal);

    sf_core_event_prepare("game_begin");
    sf_core_event_send();

    lv_resetLevelOrder();
    if (chal_id != -1) {
        lv_setup(chal_id);
    }
    else {
        lv_setupNextLvl();
    }
}

void sf_game_finalize(int player) {
    TimerPause(gm_timer, true);

    sf_core_event_prepare("game_finish");
    sf_core_event_set_int("player", player);
    sf_core_event_send();
}

unit sf_game_hero_create_corpse(structref<HERO> hero)
{
    int col_id;
    fixed[3] tint_col;
    fixed tint_hdr;
    string tint_msg;

    col_id = PlayerGetColorIndex(hero.player, false);

    if (col_id == 6) {
        tint_col[0] = 0.5;
        tint_col[1] = 1.0;
        tint_col[2] = 1.25;
        tint_hdr = 1.2;
    }
    else if (col_id == 1) {
        tint_col[0] = 0.5;
        tint_col[1] = 0.5;
        tint_col[2] = 0.5;
        tint_hdr = 1.6;
    }
    else if (col_id == 4) {
        tint_col[0] = 0.5;
        tint_col[1] = 0.8;
        tint_col[2] = 1.0;
        tint_hdr = 3.0;
    }
    else if (col_id == 7) {
        tint_col[0] = 0.5;
        tint_col[1] = 1.6;
        tint_col[2] = 1.6;
        tint_hdr = 1.2;
    }
    else if (col_id == 3) {
        tint_col[0] = 0.4;
        tint_col[1] = 0.8;
        tint_col[2] = 1.4;
        tint_hdr = 2.0;
    }
    else if (col_id == 5) {
        tint_col[0] = 0.4;
        tint_col[1] = 0.8;
        tint_col[2] = 0.9;
        tint_hdr = 1.6;
    }
    else if (col_id == 8) {
        tint_col[0] = 0.4;
        tint_col[1] = 0.8;
        tint_col[2] = 1.0;
        tint_hdr = 1.5;
    }
    else if (col_id == 14) {
        tint_col[0] = 0.3;
        tint_col[1] = 0.6;
        tint_col[2] = 0.7;
        tint_hdr = 4.0;
    }
    else {
        tint_col[0] = 0.4;
        tint_col[1] = 0.8;
        tint_col[2] = 1.0;
        tint_hdr = 1.5;
    }

    if (col_id == 2) {
        tint_msg = libNtve_gf_SetTintColor(Color(0.0, 10.0, 100.0), 3.0, 0.0);
    }
    else {
        tint_msg = libNtve_gf_SetTintColor(
            Color(
                (ColorGetComponent(libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false)), c_colorComponentRed) * tint_col[0]),
                (ColorGetComponent(libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false)), c_colorComponentGreen) * tint_col[1]),
                (ColorGetComponent(libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false)), c_colorComponentBlue) * tint_col[2])
            ),
            tint_hdr,
            0.0
        );
    }

    // UnitCreate(1, "HeroCorpse", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()), 90.0);
    UnitCreate(1, "Beacon_ZergSmall2", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()), 90.0);
    hero.corpseUnit = UnitLastCreated();
    cl_registerUnit(hero.corpseUnit, CL_TYPE_HERO_CORPSE);
    libNtve_gf_SendActorMessageToUnit(hero.corpseUnit, tint_msg);

    return UnitLastCreated();
}

bool gm_onHeroDeath(bool testConds, bool runActions) {
    structref<HERO> hero;
    int playerId;

    playerId = UnitGetOwner(EventUnit());
    hero = gm_players[playerId].hero;

    //
    if (UnitIsValid(hero.shadeUnit)) {
        sf_game_abil_shade_remove(hero.shadeUnit);
    }
    // UnitRemove(hero.guideUnit);

    hero.propeling = false;

    //
    sf_game_hero_create_corpse(hero);
    sf_stat_session_stats[playerId].deaths += 1;
    sf_stat_session_expire(playerId);

    if (UnitGroupCount(gm_herogroup, c_unitCountAlive) == 0) {
        while (TriggerActiveCount(TriggerFind("ab_onAbilityReviveCoin")) > 0 || TriggerActiveCount(TriggerFind("sf_game_on_abil_throw_essence")) > 0) {
            Wait(TICK_PERIOD, c_timeGame);
        }
        if (UnitGroupCount(gm_herogroup, c_unitCountAlive) == 0 && !lv_justCompleted) {
            if (gm_restartInitiated) { return true; }
            gm_restartInitiated = true;
            sf_core_event_prepare("game_fail");
            sf_core_event_send();
        }
    }

    return true;
}

bool gm_onPlayerLeave(bool testConds, bool runActions) {
    int i;

    gm_players[EventPlayer()].ingame = false;

    for (i = 1; i <= MAX_PLAYERS; i += 1) {
        if (gm_players[i].active) {
            PlayerSetAlliance(EventPlayer(), c_allianceIdControl, i, true);
            PlayerSetAlliance(EventPlayer(), c_allianceIdSpend, i, true);
        }
    }

    return true;
}

bool gm_onTimerRefresh(bool testConds, bool runActions) {
    // TODO:
    // ui_setGameTime(TimerGetElapsed(gm_timer));

    return true;
}

bool sf_game_on_unit_clicked(bool test_conds, bool run_actions)
{
    if (UnitGetType(EventUnit()) != "Beacon_ZergSmall2") {
        return false;
    }

    TextTagCreate(PlayerName(UnitGetOwner(EventUnit())), 24, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupSingle(EventPlayer()));
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(EventUnit()), false)));
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 1.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
    Wait(2.0, c_timeReal);
    TextTagDestroy(TextTagLastCreated());

    return true;
}

bool sf_game_on_mouse(bool test_conds, bool run_actions)
{
    unit selectedUnit;

    selectedUnit = UnitGroupUnit(UnitGroupSelected(EventPlayer()), 1);
    if (!UnitIsValid(selectedUnit)) {
        selectedUnit = gm_players[EventPlayer()].hero.mainUnit;
    }
    gm_setHeroPosition(gm_players[gm_getPlayerByUnit(selectedUnit)].hero, Point(EventMouseClickedPosXWorld(), EventMouseClickedPosYWorld()), UnitGetFacing(gm_players[gm_getPlayerByUnit(selectedUnit)].hero.mainUnit), 0);
    return true;
}

//


void sf_game_add_event_reset(trigger trig)
{
    sf_core_event_attach(trig, "game_reset");
}

void sf_game_add_event_fail(trigger trig)
{
    sf_core_event_attach(trig, "game_fail");
}

void sf_game_add_event_load(trigger trig)
{
    sf_core_event_attach(trig, "game_load");
}

void sf_game_add_event_begin(trigger trig)
{
    sf_core_event_attach(trig, "game_begin");
}


playergroup sfGameGetActivePlayerGroup() {
    playergroup plGroup = PlayerGroupEmpty();
        int i;

        for (i = 1; i <= MAX_PLAYERS; i += 1) {
            if (!gm_players[i].active) { continue; }
            PlayerGroupAdd(plGroup, i);
        }

        return plGroup;
}

playergroup sfGameGetAlivePlayerGroup() {
    playergroup plGroup = PlayerGroupEmpty();
    int i;

    for (i = 1; i <= MAX_PLAYERS; i += 1) {
        if (!gm_players[i].active) { continue; }
        if (!UnitIsAlive(gm_players[i].hero.mainUnit)) { continue; }
        PlayerGroupAdd(plGroup, i);
    }

    return plGroup;
}
