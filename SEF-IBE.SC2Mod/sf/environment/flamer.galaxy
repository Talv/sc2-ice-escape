trigger auto_gf_KillActorAfterDuration_Trigger = null;
actor auto_gf_KillActorAfterDuration_lp_actor;
fixed auto_gf_KillActorAfterDuration_lp_duration;

void gf_KillActorAfterDuration (actor lp_actor, fixed lp_duration) {
    auto_gf_KillActorAfterDuration_lp_actor = lp_actor;
    auto_gf_KillActorAfterDuration_lp_duration = lp_duration;

    if (auto_gf_KillActorAfterDuration_Trigger == null) {
        auto_gf_KillActorAfterDuration_Trigger = TriggerCreate("auto_gf_KillActorAfterDuration_TriggerFunc");
    }

    TriggerExecute(auto_gf_KillActorAfterDuration_Trigger, false, false);
}

bool auto_gf_KillActorAfterDuration_TriggerFunc (bool testConds, bool runActions) {
    actor lp_actor = auto_gf_KillActorAfterDuration_lp_actor;
    fixed lp_duration = auto_gf_KillActorAfterDuration_lp_duration;

    // Implementation
    Wait(lp_duration, c_timeGame);
    libNtve_gf_KillModel(lp_actor);
    return true;
}

trigger auto_gf_CreateLineFlame_Trigger = null;
point auto_gf_CreateLineFlame_lp_ignitionPoint;
fixed auto_gf_CreateLineFlame_lp_flameAngle;
fixed auto_gf_CreateLineFlame_lp_flameHeight;
fixed auto_gf_CreateLineFlame_lp_soundVolume;
fixed auto_gf_CreateLineFlame_lp_flameLength;
fixed auto_gf_CreateLineFlame_lp_shootFlameDuration;
fixed auto_gf_CreateLineFlame_lp_flameFadeTime;
fixed auto_gf_CreateLineFlame_lp_flameGrowthTime;
fixed auto_gf_CreateLineFlame_lp_killDistance;
region auto_gf_CreateLineFlame_lp_requiredRegionToKill;
fixed auto_gf_CreateLineFlame_lp_modelScaleX;
fixed auto_gf_CreateLineFlame_lp_modelScaleY;
fixed auto_gf_CreateLineFlame_lp_modelScaleZ;

fixed gf_GetNewFlameLengthIfUnitBlockerIsInWayOfLineFlame (point lp_ignitionPoint, fixed lp_flameAngle, fixed lp_flameLength) {
    unitgroup autoC6E11838_g;
    int autoC6E11838_u;

    // Variable Declarations
    fixed lv_a;
    fixed lv_distBetweenUnitAndFlameIgnition;
    fixed lv_checkLength;
    fixed lv_newFlameLength;
    unit lv_unitBlocker;
    unitgroup lv_unitBlockers;

    // Variable Initialization
    lv_unitBlockers = UnitGroupEmpty();

    // Implementation
    lv_newFlameLength = lp_flameLength;
    UnitGroupAddUnitGroup(
        lv_unitBlockers,
        UnitGroup(
            null,
            0,
            RegionCircle(lp_ignitionPoint, lp_flameLength),
            UnitFilter(
                0,
                0,
                (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))
            ),
            0
        )
    );
    autoC6E11838_g = lv_unitBlockers;
    autoC6E11838_u = 1;
    for ( ; autoC6E11838_u <= UnitGroupCount(autoC6E11838_g, c_unitCountAll) ; autoC6E11838_u += BoolToInt(lv_unitBlocker == UnitGroupUnit(autoC6E11838_g, autoC6E11838_u)) ) {
        lv_unitBlocker = UnitGroupUnit(autoC6E11838_g, autoC6E11838_u);
        if (sf_envi_object_get_by_unit(lv_unitBlocker) == -1) { continue; }
        if (sf_envi_object_instances[sf_envi_object_get_by_unit(lv_unitBlocker)].type_id != SF_ENVI_OBJECT_TYPE_CREATURE) { continue; }
        lv_a = (AngleBetweenPoints(lp_ignitionPoint, UnitGetPosition(lv_unitBlocker)) - lp_flameAngle);
        lv_distBetweenUnitAndFlameIgnition = DistanceBetweenPoints(UnitGetPosition(lv_unitBlocker), lp_ignitionPoint);
        // Dbg("a = " + FixedToString(lv_a, 2) + " cos(a) = " + FixedToString(Cos(lv_a), 2));
        if (
            (AbsF((Cos(lv_a) * lv_distBetweenUnitAndFlameIgnition)) <= lp_flameLength) &&
            (AbsF((Sin(lv_a) * lv_distBetweenUnitAndFlameIgnition)) <= (UnitGetPropertyFixed(lv_unitBlocker, c_unitPropRadius, c_unitPropCurrent) + 0.3)) &&
            (Cos(lv_a) >= 0.0)
        ) {
            lv_checkLength = (AbsF((Cos(lv_a) * lv_distBetweenUnitAndFlameIgnition)) + 0.0);
            if ((lv_checkLength < lv_newFlameLength)) {
                lv_newFlameLength = lv_checkLength;
            }
        }
    }

    return lv_newFlameLength;
}

actor gf_CreateLineFlameActor (point lp_ignitionPoint, fixed lp_flameDuration, fixed lp_flameAngle, fixed lp_height, fixed lp_scaleX, fixed lp_scaleY, fixed lp_scaleZ) {
    // Variable Declarations
    string lv_string;

    // Variable Initialization
    lv_string = "";

    // Implementation
    libNtve_gf_CreateModelWithPointFacing("HellionAttackBeam", libNtve_gf_PointFromPositionAndAngle(libNtve_gf_PointWithZOffset(lp_ignitionPoint, lp_height), lp_flameAngle));
    lv_string = ("SetScale " + FixedToString(lp_scaleX, c_fixedPrecisionAny) + "," + FixedToString(lp_scaleY, c_fixedPrecisionAny) + "," + FixedToString(lp_scaleZ, c_fixedPrecisionAny));
    ActorSend(libNtve_gf_ActorLastCreated(), (lv_string));
    gf_KillActorAfterDuration(libNtve_gf_ActorLastCreated(), lp_flameDuration);
    return libNtve_gf_ActorLastCreated();
}

void gf_PlayLineFlameSound (point lp_ignitionPoint, fixed lp_height, fixed lp_soundVolume) {
    // Implementation
    SoundPlayAtPoint(SoundLink("Hellion_AttackImpact", -1), PlayerGroupAll(), lp_ignitionPoint, lp_height, (lp_soundVolume * 100.0), 0.0);
    SoundPlayAtPoint(SoundLink("Firebat_AttackImpact", -1), PlayerGroupAll(), lp_ignitionPoint, lp_height, (lp_soundVolume * 100.0), 0.0);
}

void gf_CreateLineFlame (point lp_ignitionPoint, fixed lp_flameAngle, fixed lp_flameHeight, fixed lp_soundVolume, fixed lp_flameLength, fixed lp_shootFlameDuration, fixed lp_flameFadeTime, fixed lp_flameGrowthTime, fixed lp_killDistance, region lp_requiredRegionToKill, fixed lp_modelScaleX, fixed lp_modelScaleY, fixed lp_modelScaleZ) {
    auto_gf_CreateLineFlame_lp_ignitionPoint = lp_ignitionPoint;
    auto_gf_CreateLineFlame_lp_flameAngle = lp_flameAngle;
    auto_gf_CreateLineFlame_lp_flameHeight = lp_flameHeight;
    auto_gf_CreateLineFlame_lp_soundVolume = lp_soundVolume;
    auto_gf_CreateLineFlame_lp_flameLength = lp_flameLength;
    auto_gf_CreateLineFlame_lp_shootFlameDuration = lp_shootFlameDuration;
    auto_gf_CreateLineFlame_lp_flameFadeTime = lp_flameFadeTime;
    auto_gf_CreateLineFlame_lp_flameGrowthTime = lp_flameGrowthTime;
    auto_gf_CreateLineFlame_lp_killDistance = lp_killDistance;
    auto_gf_CreateLineFlame_lp_requiredRegionToKill = lp_requiredRegionToKill;
    auto_gf_CreateLineFlame_lp_modelScaleX = lp_modelScaleX;
    auto_gf_CreateLineFlame_lp_modelScaleY = lp_modelScaleY;
    auto_gf_CreateLineFlame_lp_modelScaleZ = lp_modelScaleZ;

    if (auto_gf_CreateLineFlame_Trigger == null) {
        auto_gf_CreateLineFlame_Trigger = TriggerCreate("auto_gf_CreateLineFlame_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateLineFlame_Trigger, false, false);
}

bool auto_gf_CreateLineFlame_TriggerFunc (bool testConds, bool runActions) {
    point lp_ignitionPoint = auto_gf_CreateLineFlame_lp_ignitionPoint;
    fixed lp_flameAngle = auto_gf_CreateLineFlame_lp_flameAngle;
    fixed lp_flameHeight = auto_gf_CreateLineFlame_lp_flameHeight;
    fixed lp_soundVolume = auto_gf_CreateLineFlame_lp_soundVolume;
    fixed lp_flameLength = auto_gf_CreateLineFlame_lp_flameLength;
    fixed lp_shootFlameDuration = auto_gf_CreateLineFlame_lp_shootFlameDuration;
    fixed lp_flameFadeTime = auto_gf_CreateLineFlame_lp_flameFadeTime;
    fixed lp_flameGrowthTime = auto_gf_CreateLineFlame_lp_flameGrowthTime;
    fixed lp_killDistance = auto_gf_CreateLineFlame_lp_killDistance;
    region lp_requiredRegionToKill = auto_gf_CreateLineFlame_lp_requiredRegionToKill;
    fixed lp_modelScaleX = auto_gf_CreateLineFlame_lp_modelScaleX;
    fixed lp_modelScaleY = auto_gf_CreateLineFlame_lp_modelScaleY;
    fixed lp_modelScaleZ = auto_gf_CreateLineFlame_lp_modelScaleZ;

    int i;
    structref<HERO> hero;

    // Variable Declarations
    fixed lv_waitTime;
    fixed lv_flameAge;
    fixed lv_growthAge;
    int lv_n;
    fixed lv_a;
    fixed lv_distBetweenUnitAndFlameIgnition;
    fixed lv_currentFractionOfLineOnFire;
    fixed lv_currentFlameOrNoFlameLength;
    bool lv_fading;
    fixed lv_newFlameLength;
    fixed lv_oldFlameLength;
    fixed lv_newModelScaleY;
    actor lv_flameActor;

    // Variable Initialization
    lv_waitTime = 0.0313;
    lv_currentFractionOfLineOnFire = 1.0;

    lv_registerTemporaryTrigger(TriggerGetCurrent());

    // Implementation
    lv_newFlameLength = gf_GetNewFlameLengthIfUnitBlockerIsInWayOfLineFlame(lp_ignitionPoint, lp_flameAngle, lp_flameLength);
    if ((lv_newFlameLength < lp_flameLength) && (((lv_newFlameLength + 0.5) / lp_flameLength) < 1.0)) {
        lv_newModelScaleY = (lp_modelScaleY * ((lv_newFlameLength + 0.5) / lp_flameLength));
    }
    else {
        lv_newModelScaleY = lp_modelScaleY;
    }
    lv_flameActor = gf_CreateLineFlameActor(lp_ignitionPoint, lp_shootFlameDuration, lp_flameAngle, lp_flameHeight, lp_modelScaleX, lv_newModelScaleY, lp_modelScaleZ);
    gf_PlayLineFlameSound(lp_ignitionPoint, lp_flameHeight, lp_soundVolume);
    while ((lv_flameAge < (lp_shootFlameDuration + lp_flameFadeTime))) {
        Wait(0.0, c_timeGame);
        lv_flameAge = (lv_flameAge + lv_waitTime);
        lv_growthAge = (lv_growthAge + lv_waitTime);
        lv_oldFlameLength = lv_newFlameLength;
        lv_newFlameLength = gf_GetNewFlameLengthIfUnitBlockerIsInWayOfLineFlame(lp_ignitionPoint, lp_flameAngle, lp_flameLength);
        if ((lv_newFlameLength < lp_flameLength) && (((lv_newFlameLength + 0.5) / lp_flameLength) < 1.0)) {
            lv_newModelScaleY = (lp_modelScaleY * ((lv_newFlameLength + 0.5) / lp_flameLength));
        }
        else {
            lv_newModelScaleY = lp_modelScaleY;
        }
        ActorSend(lv_flameActor, (("SetScale " + FixedToString(lp_modelScaleX, c_fixedPrecisionAny) + "," + FixedToString(lv_newModelScaleY, c_fixedPrecisionAny) + "," + FixedToString(lp_modelScaleZ, c_fixedPrecisionAny))));
        if ((lv_newFlameLength > lv_oldFlameLength)) {
            lv_growthAge = ((lv_oldFlameLength / lv_newFlameLength) * lp_flameGrowthTime);
        }

        if ((lv_growthAge < lp_flameGrowthTime)) {
            lv_currentFlameOrNoFlameLength = ((lv_growthAge / lp_flameGrowthTime) * lv_newFlameLength);
        }
        else {
            lv_currentFlameOrNoFlameLength = lv_newFlameLength;
            if ((lv_flameAge > lp_shootFlameDuration)) {
                lv_fading = true;
                lv_currentFlameOrNoFlameLength = (((lv_flameAge - lp_shootFlameDuration) / lp_flameFadeTime) * lv_newFlameLength);
            }
            else {
                lv_fading = false;
            }
        }

        for (i = 1; i <= UnitGroupCount(gm_herogroup, c_unitCountAll); i += 1) {
            hero = gm_players[UnitGetOwner(UnitGroupUnit(gm_herogroup, i))].hero;
            if (!UnitIsAlive(hero.mainUnit)) { continue; }
            if (sf_phys_is_unit_during_jump(hero.mainUnit)) { continue; }

            lv_a = (AngleBetweenPoints(lp_ignitionPoint, UnitGetPosition(hero.mainUnit)) - lp_flameAngle);
            lv_distBetweenUnitAndFlameIgnition = DistanceBetweenPoints(UnitGetPosition(hero.mainUnit), lp_ignitionPoint);
            if (
                (
                    (
                        (lv_fading == true) &&
                        (AbsF((Cos(lv_a) * lv_distBetweenUnitAndFlameIgnition)) <= (lv_newFlameLength + lp_killDistance)) &&
                        (AbsF((Cos(lv_a) * lv_distBetweenUnitAndFlameIgnition)) >= lv_currentFlameOrNoFlameLength)
                    ) ||
                    ((lv_fading == false) && (AbsF((Cos(lv_a) * lv_distBetweenUnitAndFlameIgnition)) <= (lv_currentFlameOrNoFlameLength + lp_killDistance)))
                ) &&
                (AbsF((Sin(lv_a) * lv_distBetweenUnitAndFlameIgnition)) <= lp_killDistance) &&
                (Cos(lv_a) >= 0.0)
            ) {
                UnitKill(hero.mainUnit);
            }
        }
    }
    return true;
}

//

struct sf_envi_flamer_t {
    fixed flame_length;
    point flame_pos;
};

static sf_envi_flamer_t[SF_ENVI_OBJECT_INSTANCE_LIMIT] sv_envi_flamers;

static void sf_envi_flamer_on_destroy(int obj_id)
{
    sv_envi_flamers[obj_id].flame_length = 0.0;
    sv_envi_flamers[obj_id].flame_pos = null;
}

void sf_envi_flamer_init()
{
    sf_envi_object_type_t obj_type;

    obj_type.name = "flamer";
    obj_type.fn_destroy = sf_envi_flamer_on_destroy;
    sf_envi_object_register_type_at(obj_type, SF_ENVI_OBJECT_TYPE_FLAMER);
}

int sf_envi_flamer_create(point pos)
{
    int obj_id;
    point thrower_pos;

    thrower_pos = PointWithOffsetPolar(
        pos,
        0.9,
        PointGetFacing(pos) + 180.0 + 29.5
    );
    PointSetFacing(thrower_pos, PointGetFacing(pos));

    obj_id = sf_envi_object_create_main_at(SF_ENVI_OBJECT_TYPE_FLAMER, "sfFlamethrower", thrower_pos);
    sf_make_unit_selectable(sf_envi_object_instances[obj_id].main_unit, false);

    sv_envi_flamers[obj_id].flame_pos = pos;

    // single height -1.85
    // double height -1.05
    // double scale x 93.97

    return obj_id;
}

void sf_envi_flamer_set_flame_length(int obj_id, fixed flame_length)
{
    sv_envi_flamers[obj_id].flame_length = flame_length;
}

void sf_envi_flamer_ignite(int obj_id, fixed duration)
{
    point pos;

    // pos = PointWithOffsetPolar(
    //     UnitGetPosition(sf_envi_object_instances[obj_id].main_unit),
    //     0.9,
    //     UnitGetFacing(sf_envi_object_instances[obj_id].main_unit) + 29.5
    // );
    pos = sv_envi_flamers[obj_id].flame_pos;

    gf_CreateLineFlame(
        pos,
        UnitGetFacing(sf_envi_object_instances[obj_id].main_unit),
        0.35,
        2.5,
        sv_envi_flamers[obj_id].flame_length,
        duration,
        0.3125,
        0.375,
        0.3 * (sv_envi_flamers[obj_id].flame_length / 7.0),
        RegionEntireMap(),
        1.0,
        sv_envi_flamers[obj_id].flame_length / 7.0,
        1.0
    );
    // gf_CreateLineFlame(PointFromId(5026), 0.0, 0.35, 1.5, 7.0, 1.0, 0.3125, 0.375, 0.3, null, 1.0, 1.0, 1.0);
}
