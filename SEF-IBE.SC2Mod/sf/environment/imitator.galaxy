struct sf_envi_imitator_t {
    int auto_rotate;
    fixed auto_rotate_offset;
    fixed degrees_per_second;
};

sf_envi_imitator_t [SF_ENVI_OBJECT_INSTANCE_LIMIT]sf_envi_imitators;

unitgroup sf_envi_imitator_automated_group = UnitGroupEmpty();
trigger sf_envi_imitator_trig_periodic = null;

static void sf_envi_imitator_on_destroy(int obj_id)
{
    sf_envi_imitators[obj_id].auto_rotate = 0;
    sf_envi_imitators[obj_id].auto_rotate_offset = -1.0;
    sf_envi_imitators[obj_id].degrees_per_second = 0.0;
    UnitGroupRemove(sf_envi_imitator_automated_group, sf_envi_object_get_base_unit(obj_id));
    // if (sf_envi_imitator_trig_periodic != null) {
    //     TriggerStop(sf_envi_imitator_trig_periodic);
    //     if (sf_envi_imitator_trig_periodic != null) {
    //         TriggerDestroy(sf_envi_imitator_trig_periodic);
    //     }
    //     sf_envi_imitator_trig_periodic = null;
    // }
}

// static unit sf_envi_imitator_create_component(int obj_id, fixed offset_x, fixed offset_y)
// {
//     structref<sf_envi_imitator_t> imt;
//     unit central_unit;
//     // point relative_pos;
//     point pos;
//     unit ut;

//     imt = sf_envi_imitators[obj_id];
//     pos = PointWithOffsetPolar(
//         UnitGetPosition(central_unit),
//         DistanceBetweenPoints(Point(0.0, 0.0), Point(offset_x, offset_y)),
//         AngleBetweenPoints(Point(0.0, 0.0), Point(offset_x, offset_y))
//     );

//     UnitCreate(1, UnitGetType(sf_envi_object_instances[obj_id].main_unit), c_unitCreateIgnorePlacement, 0, pos, 0);
//     ut = UnitLastCreated();
//     UnitGroupAdd(sf_envi_object_instances[obj_id].ugroup, ut);
//     UnitSetState(ut, c_unitStateRadarable, false);

//     return ut;
// }

static void sf_envi_imitator_update_components(int obj_id, unitgroup ugroup)
{
    structref<sf_envi_imitator_t> imt;
    unit central_unit;
    unit tmp_unit;
    int i;
    point pos;
    fixed height;
    bool update_height;

    central_unit = sf_envi_object_instances[obj_id].main_unit;
    imt = sf_envi_imitators[obj_id];
    height = UnitGetHeight(central_unit);

    if (ugroup == null) {
        ugroup = sf_envi_object_instances[obj_id].ugroup;
    }

    for (i = 1; i <= UnitGroupCount(ugroup, c_unitCountAll); i += 1) {
        tmp_unit = UnitGroupUnit(ugroup, i);
        if (tmp_unit == sf_envi_object_instances[obj_id].main_unit) { continue; }
        if (i == 2 && UnitGetHeight(tmp_unit) != height) {
            update_height = true;
        }
        pos = PointWithOffsetPolar(
            UnitGetPosition(central_unit),
            UnitGetCustomValue(tmp_unit, SF_GAME_UNIT_CUSTOM_IMITATOR_COMP_DISTANCE),
            UnitGetFacing(central_unit) + UnitGetCustomValue(tmp_unit, SF_GAME_UNIT_CUSTOM_IMITATOR_COMP_ANGLE)
        );
        if (UnitGetPosition(tmp_unit) != pos) {
            UnitSetPosition(tmp_unit, pos, true);
        }
        if (update_height) {
            UnitSetHeight(tmp_unit, height, TICK_PERIOD);
        }
    }
}

static unit sf_envi_imitator_create_component(int obj_id, fixed distance, fixed angle)
{
    structref<sf_envi_imitator_t> imt;
    unit central_unit;
    unit ut;

    central_unit = sf_envi_object_instances[obj_id].main_unit;
    imt = sf_envi_imitators[obj_id];

    UnitCreate(1, UnitGetType(central_unit), c_unitCreateIgnorePlacement, 0, UnitGetPosition(central_unit), 0);
    ut = UnitLastCreated();
    UnitSetCustomValue(ut, SF_GAME_UNIT_CUSTOM_IMITATOR_COMP_DISTANCE, distance);
    UnitSetCustomValue(ut, SF_GAME_UNIT_CUSTOM_IMITATOR_COMP_ANGLE, angle);
    UnitGroupAdd(sf_envi_object_instances[obj_id].ugroup, ut);
    UnitSetState(ut, c_unitStateRadarable, false);
    cl_registerUnit(ut, CL_TYPE_KILLER);

    return ut;
}

// static unitgroup sf_envi_imitator_create_components(int count)
// {
//     // UnitSetState(m, c_unitStateRadarable, false);
//     return null;
// }

// static void sf_envi_imitator_update_components(structref<sf_envi_imitator_t> imt)
// {
// }

void sf_envi_imitator_init()
{
    sf_envi_object_type_t obj_type;

    obj_type.name = "imitator";
    obj_type.fn_destroy = sf_envi_imitator_on_destroy;
    sf_envi_object_register_type_at(obj_type, SF_ENVI_OBJECT_TYPE_IMITATOR);
}

int sf_envi_imitator_create(string unit_name, point pos, fixed density)
{
    int obj_id;

    obj_id = sf_envi_object_create_main_at(SF_ENVI_OBJECT_TYPE_IMITATOR, unit_name, pos);
    UnitSetState(sf_envi_object_instances[obj_id].main_unit, c_unitStateHidden, true);
    UnitSetState(sf_envi_object_instances[obj_id].main_unit, c_unitStateRadarable, false);

    sf_envi_imitators[obj_id].degrees_per_second = 360.0 / TURN_SPEED_ICE;

    return obj_id;
}

void sf_envi_imitator_set_rotation_speed(int obj_id, fixed degrees_per_second)
{
    sf_envi_imitators[obj_id].degrees_per_second = degrees_per_second;
}

void sf_envi_imitator_set_auto_rotate(int obj_id, int auto_rotate)
{
    sf_envi_imitators[obj_id].auto_rotate = auto_rotate;
    sf_envi_imitators[obj_id].auto_rotate_offset = -1.0;

    if (auto_rotate == 0) {
        UnitGroupRemove(sf_envi_imitator_automated_group, sf_envi_object_instances[obj_id].main_unit);
    }
    else {
        UnitGroupAdd(sf_envi_imitator_automated_group, sf_envi_object_instances[obj_id].main_unit);
    }

    if (sf_envi_imitator_trig_periodic == null) {
        sf_envi_imitator_trig_periodic = TriggerCreate("sf_envi_on_imitator_periodic");
        TriggerExecute(sf_envi_imitator_trig_periodic, false, false);
    }
}

void sf_envi_imitator_set_auto_swing(int obj_id, point pos_start, point pos_end, fixed speed)
{
    // TODO:
}

int sf_envi_imitator_get_segment_count(int obj_id)
{
    return UnitGroupCount(sf_envi_object_instances[obj_id].ugroup, c_unitCountAll);
}

void sf_envi_imitator_rotate(int obj_id, fixed angle, bool relative, bool wait_until_done)
{
    int auto_rotate;

    if (!relative) {
        // Dbg("[imi/rotate] current abs angle = " + FixedToString(UnitGetFacing(sf_envi_object_instances[obj_id].main_unit), 4));
        // Dbg("[imi/rotate] requested abs angle = " + FixedToString(angle, 4));
        angle = UnitGetFacing(sf_envi_object_instances[obj_id].main_unit) - angle;
    }
    // Dbg("[imi/rotate] relative angle = " + FixedToString(angle, 4));

    if (angle > 0) {
        auto_rotate = 1;
    }
    else {
        auto_rotate = -1;
    }

    sf_envi_imitators[obj_id].auto_rotate = auto_rotate;
    sf_envi_imitator_set_auto_rotate(obj_id, auto_rotate);
    sf_envi_imitators[obj_id].auto_rotate_offset = AbsF(angle);

    if (wait_until_done) {
        while (UnitGroupHasUnit(sf_envi_imitator_automated_group, sf_envi_object_instances[obj_id].main_unit)) {
            Wait(TICK_PERIOD, c_timeGame);
        }
    }
}

void sf_envi_imitator_compose_wheel(int obj_id, fixed radius)
{
    int i;
    int count;
    fixed angle;
    unitgroup ugroup = UnitGroupEmpty();

    count = FixedToInt(M_PI * 2 * radius / 1.0);

    for (i = 0; i < count; i += 1) {
        angle = (IntToFixed(i + 1) / IntToFixed(count)) * 360.0;
        UnitGroupAdd(ugroup, sf_envi_imitator_create_component(obj_id, radius, angle));
    }

    sf_envi_imitator_update_components(obj_id, ugroup);
}

void sf_envi_imitator_compose_rectangle(int obj_id, fixed offset_x, fixed offset_y, fixed width, fixed height)
{
}

void sf_envi_imitator_compose_line_from_center(int obj_id, fixed offset, fixed angle, fixed width)
{
    int i;
    int count;
    unitgroup ugroup = UnitGroupEmpty();

    count = FixedToInt(width);

    for (i = 0; i < count; i += 1) {
        UnitGroupAdd(ugroup, sf_envi_imitator_create_component(obj_id, offset + IntToFixed(i), angle));
    }

    sf_envi_imitator_update_components(obj_id, ugroup);
}

void sf_envi_imitator_create_segment(int obj_id, fixed offset_x, fixed offset_y)
{
}

void sf_envi_imitator_remove_segment_from_center(int obj_id, fixed offset, fixed angle)
{
    int i;
    unit tmp_unit = null;
    unit closest_unit;
    fixed closest_distance;
    fixed current_distance;

    for (i = 1; i <= UnitGroupCount(sf_envi_object_instances[obj_id].ugroup, c_unitCountAll); i += 1) {
        tmp_unit = UnitGroupUnit(sf_envi_object_instances[obj_id].ugroup, i);
        if (tmp_unit == sf_envi_object_instances[obj_id].main_unit) { continue; }

        current_distance = DistanceBetweenPoints(
            PointWithOffsetPolar(Point(125, 125), offset, angle),
            PointWithOffsetPolar(Point(125, 125), UnitGetCustomValue(tmp_unit, SF_GAME_UNIT_CUSTOM_IMITATOR_COMP_DISTANCE), UnitGetCustomValue(tmp_unit, SF_GAME_UNIT_CUSTOM_IMITATOR_COMP_ANGLE))
        );
        // Dbg("[imitator/removece] i = " + IntToString(i) + " ; dist = " + FixedToString(current_distance, 2));
        if (!UnitIsValid(closest_unit) || current_distance < closest_distance) {
            closest_distance = current_distance;
            closest_unit = tmp_unit;
        }
    }

    // Dbg("[imitator/removece] Removing #" + UnitGetType(tmp_unit) + " ; Distance = " + FixedToString(closest_distance, 2));
    UnitGroupRemove(sf_envi_object_instances[obj_id].ugroup, closest_unit);
    UnitRemove(closest_unit);
}

void sf_envi_imitator_remove_segment_at_offset(int obj_id, fixed offset_x, fixed offset_y)
{
}

void sf_envi_imitator_remove_segment_at_index(int obj_id, int index)
{
}

void sf_envi_imitator_relayout(int obj_id)
{
    sf_envi_imitator_update_components(obj_id, null);
}

bool sf_envi_on_imitator_periodic(bool test_conds, bool run_actions)
{
    int i;
    int count;
    int obj_id;
    unit tmp_unit;
    structref<sf_envi_imitator_t> imt;
    fixed new_angle;
    fixed angle_offset;
    unitgroup tmp_group;

    for (;;) {
        count = UnitGroupCount(sf_envi_imitator_automated_group, c_unitCountAll);

        if (count <= 0) {
            break;
        }

        tmp_group = UnitGroupCopy(sf_envi_imitator_automated_group);
        for (i = 1; i <= UnitGroupCount(tmp_group, c_unitCountAll); i += 1) {
            tmp_unit = UnitGroupUnit(tmp_group, i);
            obj_id = sf_envi_object_get_by_unit(tmp_unit);
            imt = sf_envi_imitators[obj_id];
            angle_offset = imt.degrees_per_second / (1.0 / TICK_PERIOD);

            // limited rotation
            if (imt.auto_rotate_offset != -1.0) {
                if (angle_offset > imt.auto_rotate_offset) {
                    angle_offset = imt.auto_rotate_offset;
                    Dbg(
                        "[imt/periodic] adjusting last step" +
                        "; angle_offset = " + FixedToString(angle_offset, 4) +
                        "; imt_offset = " + FixedToString(imt.auto_rotate_offset, 4)
                    );
                }
                imt.auto_rotate_offset -= angle_offset;
                if (imt.auto_rotate_offset == 0) {
                    // imt.auto_rotate = 0;
                    UnitGroupRemove(sf_envi_imitator_automated_group, tmp_unit);
                    Dbg("[imt/periodic] auto rotation done");
                }
            }

            // Dbg("[imt/periodic] angle_offset = " + FixedToString(angle_offset, 4));

            if (imt.auto_rotate) {
                new_angle = UnitGetFacing(tmp_unit) - (IntToFixed(imt.auto_rotate) * angle_offset);
            }

            UnitSetFacing(tmp_unit, new_angle, TICK_PERIOD);
            sf_envi_imitator_update_components(obj_id, null);
        }

        Wait(TICK_PERIOD, c_timeGame);
    }

    TriggerDestroy(TriggerGetCurrent());
    sf_envi_imitator_trig_periodic = null;

    return true;
}
