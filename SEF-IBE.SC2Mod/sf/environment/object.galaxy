void sf_envi_object_destroy_instance(int obj_id)
{
    structref<sf_envi_object_instance_t> obj_ins;
    int i;

    obj_ins = sf_envi_object_instances[obj_id];

    // Dbg("[object/destroy_instance] destroying #" + IntToString(obj_id) + " unit = " + UnitGetType(obj_ins.main_unit));
    sf_envi_object_types[obj_ins.type_id].fn_destroy(obj_id);

    if (obj_ins.preserve_main_unit) {
        UnitSetCustomValue(obj_ins.main_unit, UNIT_CUSTOM_OBJECT_ID, 0);
        UnitGroupRemove(obj_ins.ugroup, obj_ins.main_unit);
    }
    else {
        // in case main unit is not within ugroup (while it should..)
        if (!UnitGroupHasUnit(obj_ins.ugroup, obj_ins.main_unit)) {
            // UnitRemove(obj_ins.main_unit);
            Dbg("[object/destroy_instance] main unit not in ugroup " + IntToString(obj_ins.type_id) + " - " + UnitGetType(obj_ins.main_unit) + " (#" + IntToString(UnitGetTag(obj_ins.main_unit)) + ")");
        }
    }

    for (i = 1; i <= UnitGroupCount(obj_ins.ugroup, c_unitCountAll); i += 1) {
        UnitSetCustomValue(UnitGroupUnit(obj_ins.ugroup, i), UNIT_CUSTOM_OBJECT_ID, 0);
        UnitRemove(UnitGroupUnit(obj_ins.ugroup, i));
    }

    obj_ins.main_unit = null;
    obj_ins.preserve_main_unit = false;
    obj_ins.main_unit_init_pos = null;
    obj_ins.type_id = -1;
    obj_ins.ugroup = null;
}

void sf_envi_object_clear_all()
{
    int i;

    for (i = 0; i < SF_ENVI_OBJECT_INSTANCE_LIMIT; i += 1) {
        if (sf_envi_object_instances[i].type_id == -1) { continue; }
        sf_envi_object_destroy_instance(i);
    }
}

int sf_envi_object_register_type(structref<sf_envi_object_type_t> obj_type)
{
    int i;

    for (i = 0; i < SF_ENVI_OBJECT_TYPE_LIMIT; i += 1) {
        if (sf_envi_object_types[i].name != "") { continue; }
        sf_envi_object_register_type_at(obj_type, i);
        return i;
    }

    return -1;
}

void sf_envi_object_register_type_at(structref<sf_envi_object_type_t> obj_type, int id)
{
    sf_envi_object_types[id].name = obj_type.name;
    // sf_envi_object_types[id].fn_init = obj_type.fn_init;
    sf_envi_object_types[id].fn_destroy = obj_type.fn_destroy;
}

int sf_envi_object_create(int type_id)
{
    int i;
    structref<sf_envi_object_instance_t> obj_ins;

    for (i = 0; i < SF_ENVI_OBJECT_INSTANCE_LIMIT; i += 1) {
        if (sf_envi_object_instances[i].type_id != -1) { continue; }

        obj_ins = sf_envi_object_instances[i];
        obj_ins.type_id = type_id;
        obj_ins.ugroup = UnitGroupEmpty();
        // sf_envi_object_types[obj_ins.type_id].fn_init(i);
        DataTableSetInt(false, "sf_envi_object", i);
        return i;
    }

    // TODO: log overflow
    return -1;
}

// *
// * Should only be used internally
// *
int sf_envi_object_create_main_at(int type_id, string unit_name, point pos)
{
    structref<sf_envi_object_instance_t> obj_ins;
    int obj_id;

    obj_id = sf_envi_object_create(type_id);
    obj_ins = sf_envi_object_instances[obj_id];

    obj_ins.main_unit_init_pos = pos;

    if (unit_name != null && unit_name != "") {
        UnitCreate(1, unit_name, c_unitCreateIgnorePlacement, 0, pos, PointGetFacing(pos));
        obj_ins.main_unit = UnitLastCreated();
        UnitGroupAdd(obj_ins.ugroup, obj_ins.main_unit);
        UnitSetCustomValue(obj_ins.main_unit, UNIT_CUSTOM_OBJECT_ID, IntToFixed(obj_id + 1));
        // force facing by settting it explictly (this ignores Turnable flag which is respected by UnitCreate)
        UnitSetFacing(obj_ins.main_unit, PointGetFacing(pos), 0.0);
    }

    return obj_id;
}

//**
//* Should only be used internally
//*
//* @param type_id type id
//* @return obj_id
//*/
int sf_envi_object_create_from_unit(int type_id, unit munit)
{
    structref<sf_envi_object_instance_t> obj_ins;
    int obj_id;

    obj_id = sf_envi_object_create(type_id);
    obj_ins = sf_envi_object_instances[obj_id];

    obj_ins.main_unit_init_pos = UnitGetPosition(munit);
    PointSetFacing(obj_ins.main_unit_init_pos, UnitGetFacing(munit));

    obj_ins.preserve_main_unit = true;
    obj_ins.main_unit = munit;
    UnitGroupAdd(obj_ins.ugroup, obj_ins.main_unit);

    UnitSetCustomValue(obj_ins.main_unit, UNIT_CUSTOM_OBJECT_ID, IntToFixed(obj_id + 1));

    return obj_id;
}

int sf_envi_object_last_created()
{
    int obj_id;

    obj_id = DataTableGetInt(false, "sf_envi_object");
    if (obj_id == 0 && !DataTableValueExists(false, "sf_envi_object")) {
        return -1;
    }

    return obj_id;
}

int sf_envi_object_get_by_unit(unit munit)
{
    return FixedToInt(UnitGetCustomValue(munit, UNIT_CUSTOM_OBJECT_ID)) - 1;
}

int sf_envi_object_get_by_origin_position(point pos)
{
    int i;

    // TODO: optimization - hash point in data tables

    for (i = 0; i < SF_ENVI_OBJECT_INSTANCE_LIMIT; i += 1) {
        if (sf_envi_object_instances[i].type_id == -1) { continue; }
        if (sf_envi_object_instances[i].main_unit_init_pos != pos) { continue; }
        return i;
    }

    return -1;
}

int sf_envi_object_from_reference(int ref)
{
    return DataTableGetInt(true, "sf_envi_object_refs_" + IntToString(ref));
}

void sf_envi_object_assign_reference(int obj_id, int ref)
{
    DataTableSetInt(true, "sf_envi_object_refs_" + IntToString(ref), obj_id);
}

unitgroup sf_envi_object_get_unit_group(int obj_id)
{
    structref<sf_envi_object_instance_t> obj_ins = sf_envi_object_instances[obj_id];

    return UnitGroupCopy(obj_ins.ugroup);
}

unit sf_envi_object_get_base_unit(int obj_id)
{
    structref<sf_envi_object_instance_t> obj_ins = sf_envi_object_instances[obj_id];

    return UnitGroupUnit(obj_ins.ugroup, 1);
}

int sf_envi_event_param_object()
{
    return DataTableGetInt(false, TriggerEventParamName("sf_envi_ge_button_state_changed", "sf_envi_event_param_object"));
}
