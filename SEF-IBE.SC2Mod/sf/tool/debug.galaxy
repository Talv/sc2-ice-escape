static unit sf_get_selected_unit_from_ev()
{
    return UnitGroupUnit(UnitGroupSelected(EventPlayer()), 1);
}


//
// AUTO REVIVE
//
void sf_tool_dbg_cmdhand_a(structref<sf_tool_command_payload_t> payload) {
    trigger trig;

    trig = TriggerFind("cmd_on_autorevive");
    // print(TriggerGetFunction(trig));
    if (!TriggerGetFunction(trig)) {
        trig = TriggerCreate("cmd_on_autorevive");
        TriggerEnable(trig, false);
        TriggerAddEventTimePeriodic(trig, 1, c_timeGame);
    }

    if (payload.arguments[0] == "off") {
        TriggerEnable(trig, false);
        print("off");
    }
    else {
        TriggerEnable(trig, true);
        print("on");
    }
}
bool cmd_on_autorevive(bool test_conds, bool run_actions) {
    int i;

    for (i = 1; i <= MAX_PLAYERS; i += 1) {
        if (UnitIsValid(gm_players[i].hero.mainUnit) && !UnitIsAlive(gm_players[i].hero.mainUnit)) {
            hr_revive(-1, gm_players[i].hero, true);
        }
    }

    return true;
}

//
// LEVEL CHANGE
//
void sf_tool_dbg_cmdhand_l(structref<sf_tool_command_payload_t> payload) {
    int lv;

    lv = StringToInt(payload.arguments[0]);

    // chal_cleanup();
    lv_setup(lv);
    // print("Level " + IntToString(lv_current));

}

void sf_tool_dbg_cmdhand_r(structref<sf_tool_command_payload_t> payload)
{
    RestartGame(PlayerGroupAll());
}

//
// CLICK LISTENER
//

static string click_action = "";

void sf_tool_dbg_cmdhand_click(structref<sf_tool_command_payload_t> payload) {
    click_action = payload.arguments[0];
    if (TriggerFind("sf_cmd_on_click") == null) {
        TriggerCreate("sf_cmd_on_click");
    }
    TriggerAddEventMouseClicked(TriggerFind("sf_cmd_on_click"), c_playerAny, c_mouseButtonLeft, true);
}

bool sf_cmd_on_click(bool test_conds, bool run_actions) {
    point pt = Point(EventMouseClickedPosXWorld(), EventMouseClickedPosYWorld());

    if (click_action == "jump") {
        if (!UnitIsValid(sf_get_selected_unit_from_ev())) {
            return false;
        }
        sf_phys_jump_launch(sf_get_selected_unit_from_ev(), pt, 0.0, 0.0);
    }
    else if (click_action == "wh") {
        DbgAtPoint(
            pt,
            FixedToString(WorldHeight(c_heightMapGround, pt), -1)
        );
        Dbg("c_heightMapAir: " + FixedToString(WorldHeight(c_heightMapAir, pt), -1));
        Dbg("c_heightMapGlide: " + FixedToString(WorldHeight(c_heightMapGlide, pt), -1));
        Dbg("c_heightMapGround: " + FixedToString(WorldHeight(c_heightMapGround, pt), -1));
    }
    // TriggerDestroy(TriggerGetCurrent());

    return true;
}

//
// GUIDE ARROW
//
void sf_tool_dbg_cmdhand_ga(structref<sf_tool_command_payload_t> payload) {
    if (payload.arguments[0] == "off") {
        libNtve_gf_SendActorMessageToUnit(gm_players[EventPlayer()].hero.guideUnit, libNtve_gf_ModelSwap("Invisible", 1));
        // UnitSetState(gm_players[EventPlayer()].hero.guideUnit, c_unitStateHidden, true);
        print("off");
    }
    else {
        libNtve_gf_SendActorMessageToUnit(gm_players[EventPlayer()].hero.guideUnit, libNtve_gf_ModelSwap("GuideArrow", 1));
        // UnitSetState(gm_players[EventPlayer()].hero.guideUnit, c_unitStateHidden, false);
        print("on");
    }
}

//
// DEBUG ENVIRONMENT
//
void sf_tool_dbg_cmdhand_de(structref<sf_tool_command_payload_t> payload) {
    int i;
    int l;
    unit tmp_unit;

    PlayerSetAlliance(0, c_allianceIdControl, 1, true);
    for (i = 0; i < SF_ENVI_OBJECT_INSTANCE_LIMIT; i += 1) {
        if (sf_envi_object_instances[i].type_id == -1) { continue; }
        for (l = 1; l <= UnitGroupCount(sf_envi_object_instances[i].ugroup, c_unitCountAll); l += 1) {
            tmp_unit = UnitGroupUnit(sf_envi_object_instances[i].ugroup, l);
            // UnitSetOwner(tmp_unit, 1, false);
            UnitSetState(tmp_unit, c_unitStateSelectable, true);
            UnitSetState(tmp_unit, c_unitStateTargetable, true);
            UnitSetState(tmp_unit, c_unitStateHighlightable, true);
        }
    }
}

void sf_tool_dbg_init()
{
    if (GameIsTestMap(false)) {
        sf_tool_cmd_register("de", sf_tool_dbg_cmdhand_de);
        sf_tool_cmd_register("ga", sf_tool_dbg_cmdhand_ga);
        sf_tool_cmd_register("click", sf_tool_dbg_cmdhand_click);
        sf_tool_cmd_register("r", sf_tool_dbg_cmdhand_r);
        sf_tool_cmd_register("l", sf_tool_dbg_cmdhand_l);
        sf_tool_cmd_register("a", sf_tool_dbg_cmdhand_a);
    }
}
