

int cmd_lastWordCount;

static string cmd_parseWord(string msg) {
    string rtMsg = "";
    string character;
    bool quoteOpen = false;

    cmd_lastWordCount = 0;

    while (StringLength(msg)) {
        character = StringSub(msg, 1, 1);
        msg = StringSub(msg, 2, StringLength(msg));

        cmd_lastWordCount += 1;

        if (character == "\"") {
            quoteOpen = !quoteOpen;
        }
        else if (character == " " && !quoteOpen && StringLength(rtMsg) > 0) {
            break;
        }
        else {
            rtMsg += character;
        }
    }

    return rtMsg;
}

// static bool cmd_cmdHasFlag(string flag) {
//     return false;
// }

// static string cmd_cmdGetNamedParam(string param) {
//     return "";
// }

void cmd_init() {
    sf_tool_dbg_init();
    TriggerAddEventChatMessage(TriggerCreate("cmd_on_command"), c_playerAny, "-", false);
}

bool cmd_on_command(bool testConds, bool runActions) {
    string msg;
    string[64] words;
    int wordsCount;
    int i;
    bool parametersDone;
    int flagsCount;
    int paramsCount;
    int argumentsCount;
    trigger tempTrig;
    sf_tool_command_payload_t cmd_cmdInfo;

    if (StringSub(EventChatMessage(false), 1, 1) != "-") {
        return false;
    }

    msg = StringSub(EventChatMessage(false), 2, StringLength(EventChatMessage(false)));

    for (i = 0; StringLength(msg); i += 1) {
        words[i] = cmd_parseWord(msg);
        wordsCount += 1;
        if (StringLength(msg) > cmd_lastWordCount) {
            msg = StringSub(msg, cmd_lastWordCount + 1, StringLength(msg));
        }
        else {
            msg = "";
        }
        // words[i] = trim(words[i]);
        // print(words[i]);
    }

    if (wordsCount <= 0) {
        return true;
    }

    parametersDone = false;
    flagsCount = 0;
    paramsCount = 0;
    argumentsCount = 0;
    for (i = 0; i < wordsCount; i += 1) {
        if (i == 0) {
            cmd_cmdInfo.name = words[i];
            continue;
        }

        if (!parametersDone) {
            if (StringSub(words[i], 1, 2) == "--") {
                if (StringLength(words[i]) <= 2) {
                    Dbg("parse error: flag length 2");
                    return true;
                }
                cmd_cmdInfo.flags[flagsCount] = StringSub(words[i], 3, StringLength(words[i]));
                flagsCount += 1;
            }
            else if (StringSub(words[i], 1, 1) == "--") {
                if (StringLength(words[i]) <= 1) {
                    Dbg("parse error: param name length 1");
                    return true;
                }
                if (wordsCount < (i + 1)) {
                    Dbg("parse error: missing param arg");
                    return true;
                }
                cmd_cmdInfo.flags[flagsCount] = StringSub(words[i], 2, StringLength(words[i]));
                paramsCount += 1;
            }
            else {
                parametersDone = true;
            }
        }

        if (parametersDone) {
            cmd_cmdInfo.arguments[argumentsCount] = words[i];
            argumentsCount += 1;
        }
    }

    cmd_cmdInfo.player = EventPlayer();

    // if (!GameIsTestMap(false)) {
    //     if (!StringEqual(cmd_cmdInfo.name, "s", true) && !StringEqual(cmd_cmdInfo.name, "kick", true) && !StringEqual(cmd_cmdInfo.name, "c", true)) {
    //         return true;
    //     }
    // }

    // tempTrig = TriggerCreate("cmd_call_" + cmd_cmdInfo.name);
    // TriggerExecute(tempTrig, true, true);
    // TriggerDestroy(tempTrig);

    for (i = 0; i < SF_TOOL_COMMAND_MAX; i += 1) {
        if (sf_tool_commands[i].name != cmd_cmdInfo.name) { continue; }
        sf_tool_commands[i].handler(cmd_cmdInfo);
        break;
    }

    return true;
}

void sf_tool_cmd_register(string name, sf_tool_command_handler_t handler)
{
    int i;

    for (i = 0; i < SF_TOOL_COMMAND_MAX; i += 1) {
        if (sf_tool_commands[i].name != null && sf_tool_commands[i].name != name) { continue; }
        sf_tool_commands[i].name = name;
        sf_tool_commands[i].handler = handler;
        break;
    }
}
