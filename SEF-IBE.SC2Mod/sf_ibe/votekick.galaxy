static trigger[MAX_PLAYERS + 1] ibe_kick_triggers;
static bool[MAX_PLAYERS + 1][MAX_PLAYERS + 1] ibe_kick_vote;
static int ibe_kick_playerId;

static void ibe_kick_update_info(int playerId)
{
    int i;
    int voteCount = 0;
    int voteTotal = 0;

    for (i = 1; i <= MAX_PLAYERS; i += 1) {
        // if (i == playerId) { continue; }

        if (PlayerStatus(i) == c_playerStatusActive && PlayerType(i) == c_playerTypeUser) {
            voteTotal += 1;
        }
        else { continue; }

        if (ibe_kick_vote[playerId][i]) {
            voteCount += 1;
        }
    }

    UIDisplayMessage(
        PlayerGroupAll(),
        c_messageAreaSubtitle,
        IntToText(voteCount) + StringToText("/") + IntToText(voteTotal) + StringToText(" votes to kick ") + sf_player_name_colored(playerId)
    );

    if ( IntToFixed(voteCount) / IntToFixed(voteTotal) >= 0.75 && !TriggerExists(ibe_kick_triggers[playerId])) {
        ibe_kick_playerId = playerId;
        ibe_kick_triggers[playerId] = TriggerCreate("ibe_kick_onMain");
        TriggerExecute(ibe_kick_triggers[playerId], true, false);

        UIDisplayMessage(
            PlayerGroupAll(),
            c_messageAreaSubtitle,
            sf_player_name_colored(playerId) + StringToText(" will be kicked within 15 sec! Type -c to cancel.")
        );
    }
    else if (TriggerExists(ibe_kick_triggers[playerId])) {
        TriggerStop(ibe_kick_triggers[playerId]);
        TriggerDestroy(ibe_kick_triggers[playerId]);

        UIDisplayMessage(
            PlayerGroupAll(),
            c_messageAreaSubtitle,
            StringToText("Votekick against ") + sf_player_name_colored(playerId) + StringToText(" canceled!")
        );
    }
}

void ibe_votekick_cmdhand_kick(structref<sf_tool_command_payload_t> payload)
{
    unit selectedUnit;
    int playerId;

    selectedUnit = UnitGroupUnit(UnitGroupSelected(EventPlayer()), 1);

    if (selectedUnit == null) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringToText("Select unit"));
        return;
    }

    playerId = UnitGetOwner(selectedUnit);

    ibe_kick_vote[playerId][EventPlayer()] = true;
    ibe_kick_update_info(playerId);
}

void ibe_votekick_cmdhand_c(structref<sf_tool_command_payload_t> payload)
{
    unit selectedUnit;
    int playerId;

    selectedUnit = UnitGroupUnit(UnitGroupSelected(EventPlayer()), 1);

    if (selectedUnit == null) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringToText("Select unit"));
        return;
    }

    playerId = UnitGetOwner(selectedUnit);

    // if (!TriggerExists(ibe_kick_triggers[playerId])) {
    //     return false;
    // }

    ibe_kick_vote[playerId][EventPlayer()] = false;
    ibe_kick_update_info(playerId);
}

bool ibe_kick_onMain(bool test_conds, bool runActions) {
    int playerId;
    int i;

    playerId = ibe_kick_playerId;
    Wait(15.0, c_timeGame);
    GameOver(playerId, c_gameOverDefeat, false, false);

    for (i = 1; i <= MAX_PLAYERS; i += 1) {
        if (gm_players[i].active) {
            PlayerSetAlliance(playerId, c_allianceIdControl, i, true);
            PlayerSetAlliance(playerId, c_allianceIdSpend, i, true);
        }
    }

    TriggerDestroy(TriggerGetCurrent());

    return true;
}
