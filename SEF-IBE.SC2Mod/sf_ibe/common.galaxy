struct gs_playerSettingEnabled {
    bool lv_helpScreen;
    bool lv_statsScreen;
    bool lv_leaderboard;
    bool lv_leaderBoardIsMinimized;
    bool lv_ui;
    bool lv_currentGameTimer;
    bool lv_minimap;
    bool lv_minimapCommandsEnabled;
    bool lv_commandCard;
    bool lv_cameraSteepAngle;
    bool lv_commandsHelpVisible;
    bool lv_altHotkeys;
};

struct gs_gameUI {
    int lv_commandPanel;
    int[15] lv_commandButtons;
    int lv_commandTooltipAnchor;
    int lv_minimap;
    int lv_pingButton;
    int lv_allianceButton;
    int lv_menuBar;
    int lv_menuBarBackground;
    int lv_menuButton;
    int lv_helpButton;
    int lv_socialButton;
    int lv_socialButtonCountLabel;
    int lv_socialButtonNormalImage;
    int lv_socialButtonHoverImage;
    int lv_chatButton;
    int lv_infoPanel;
    int lv_experienceLabel;
    int lv_lifeLabel;
    int lv_energyLabel;
    int lv_experienceBar;
    int lv_heroNameLabel;
    int lv_unitWireframe;
    int lv_infoPaneGroup;
    int lv_uncontrollableUnitFrame;
    int lv_uncontrollableUnitPromptLabel;
    int lv_uncontrollableUnitTitleLabel;
    int lv_infoPaneUnit;
    int lv_infoPaneNameLabel;
    int lv_infoPaneTypeLabel;
    int lv_infoPaneSubtitle;
    int lv_commandTargetName;
    int lv_commandTargetPrompt;
    int lv_commandTargetImage;
};

struct gs_customUI {
    int lv_commandCardBackground;
    int lv_gameTimer;
    int lv_cameraFollowButton;
    int lv_menuButton;
};

//
//
//

const int IBE_GM_MAX = 4;

int ibe_game_difficulty = -1;
int ibe_game_speed = -1;

playergroup gv_initGamePlayerGroup = PlayerGroupEmpty();

int gv_rightSliderAddonDialog;
int gv_uiBgPortraitCoverup;
int gv_sliderDialog;
gs_gameUI gv_gameUI;
gs_customUI gv_customUI;
int gv_menuDialog;
int gv_menuButton;
int gv_helpButton;
int gv_statsButton;
int gv_indivButton;
int gv_teamsButton;
int gv_iceBaneDeathReportDialogLabel;
int gv_deathReportDialog;
int gv_minimapBorder;
int gv_commandsDialog;
int gv_commandsDialogCloseButton;
gs_playerSettingEnabled[11] gv_playerSettingIsEnabled;
bool[11] gv_following;
bool gv_escaped;

void gf_ToggleCameraAutoFollow(int lp_player) {
    if ((gv_following[lp_player] == false) && (gv_escaped == false)) {
        gv_following[lp_player] = true;
    }
    else {
        gv_following[lp_player] = false;
    }
    if ((gv_customUI.lv_cameraFollowButton) != c_invalidDialogControlId) {
        libNtve_gf_SetDialogItemToggled(gv_customUI.lv_cameraFollowButton, gv_following[lp_player], PlayerGroupSingle(lp_player));
    }
    else {
    }
}

void gf_MakePlayerFollowSelectedUnit (int lp_player, fixed lp_cameraMoveTime) {
    // Variable Declarations
    unit lv_unit;

    // Variable Initialization

    // Implementation
    if ((UnitGroupCount(UnitGroupSelected(lp_player), c_unitCountAlive) == 1)) {
        lv_unit = UnitGroupUnit(UnitGroupSelected(lp_player), 1);
        CameraPan(lp_player, UnitGetPosition(lv_unit), lp_cameraMoveTime, -1, 10.0, false);
    }

}

void gf_ToggleCommandsDialog(int lp_player) {
    if ((gv_playerSettingIsEnabled[lp_player].lv_commandsHelpVisible) == true) {
        gv_playerSettingIsEnabled[lp_player].lv_commandsHelpVisible = false;
        DialogSetVisible(gv_commandsDialog, PlayerGroupSingle(lp_player), false);
    }
    else {
        gv_playerSettingIsEnabled[lp_player].lv_commandsHelpVisible = true;
        DialogSetVisible(gv_commandsDialog, PlayerGroupSingle(lp_player), true);
    }
}

bool gf_PointIsBeingLookedAtByPlayerCamera (point lp_point, int lp_player) {
    point lv_camTarget;

    lv_camTarget = CameraGetTarget(lp_player);

    return RegionContainsPoint(RegionRect((PointGetX(lv_camTarget) + 14.0), (PointGetY(lv_camTarget) - 3.0), (PointGetX(lv_camTarget) - 14.0), (PointGetY(lv_camTarget) + 10.5)), lp_point);
}

int ibe_gm_code(int diff, int speed)
{
    int v = 0;

    if (diff == 1) {
        v |= 1 << 0;
    }
    if (speed == 1) {
        v |= 1 << 1;
    }

    return v;
}

int ibe_gm_diff_from_code(int code)
{
    if (code & (1 << 0)) {
        return 1;
    }
    else {
        return 0;
    }
}

int ibe_gm_speed_from_code(int code)
{
    if (code & (1 << 1)) {
        return 1;
    }
    else {
        return 0;
    }
}

text ibe_gm_name_diff(int diff)
{
    if (diff == 0) {
        return StringToText("<c val=\"30a955\">NORMAL</c>");
    }
    else if (diff == 1) {
        return StringToText("<c val=\"ff6702\">EXTREME</c>");
    }
    else {
        return StringToText("-");
    }
}

text ibe_gm_name_speed(int speed)
{
    if (speed == 0) {
        return StringToText("<c val=\"02ccff\">NORMAL</c>");
    }
    // else if (speed == 1) {
    else if (speed >= 1) { // WTF?
        return StringToText("<c val=\"ff0802\">FAST</c>");
    }
    else {
        return StringToText("-");
    }
}

text ibe_gm_name(int code)
{
    return ibe_gm_name_diff(ibe_gm_diff_from_code(code)) + StringToText(" ") + ibe_gm_name_speed(ibe_gm_speed_from_code(code));
}

int ibe_gm_current_code()
{
    return ibe_gm_code(ibe_game_difficulty, ibe_game_speed);
}

void ibe_gm_current_set(int code)
{
    if (ibe_gm_diff_from_code(code) == 0) {
        ibe_game_difficulty = 0;
    }
    else {
        ibe_game_difficulty = 1;
    }

    if (ibe_gm_speed_from_code(code) == 0) {
        ibe_game_speed = 0;
        GameSetSpeedValue(c_gameSpeedNormal);
    }
    else {
        ibe_game_speed = 1;
        GameSetSpeedValue(c_gameSpeedFast);
    }
}
