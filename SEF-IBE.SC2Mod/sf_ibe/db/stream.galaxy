
const string DB_STREAM_DELIMETER = "`";
static string DB_STREAM_DIGIT_BASE = "0ia1l2p34xq5j6HE7W89LbcdDefghkRmnKorstuvwyzAMBFCGIJNQOPTUXSVYZ!$%/()=?,.;:_^#+* @{[]}|~";

struct db_stream_t {
    string buff;
    int values;
};

string db_stream_serialize_int(int number)
{
    string chunk = "";
    int current = 0;

    if (number < 0) {
        chunk = "-";
        number = AbsI(number);
    }

    while (number > 0) {
        current = number % StringLength(DB_STREAM_DIGIT_BASE);
        number = number / StringLength(DB_STREAM_DIGIT_BASE);
        chunk = StringSub(DB_STREAM_DIGIT_BASE, current + 1, current + 1) + chunk;
    }

    return chunk;
}

int db_stream_unserialize_int(string chunk)
{
    string current;
    int i;
    int number;
    bool negative = false;

    if (StringSub(chunk, StringLength(chunk), StringLength(chunk)) == "-") {
        negative = true;
        chunk = StringSub(chunk, 1, StringLength(chunk) - 1);
    }

    for (i = 0; i < StringLength(chunk); i += 1) {
        current = StringSub(chunk, StringLength(chunk) - i, StringLength(chunk) - i);
        number += (StringFind(DB_STREAM_DIGIT_BASE, current, true) - 1) * PowI(StringLength(DB_STREAM_DIGIT_BASE), IntToFixed(i));
    }

    if (negative) {
        number = -AbsI(number);
    }

    return number;
}

string db_stream_serialize_fixed(fixed value)
{
    int vint;
    int fpoint;
    bool negative;
    string chunk = "";

    if (value < 0.0) {
        negative = true;
        value = AbsF(value);
        chunk += "-";
    }

    vint = FixedToInt(value);
    value -= IntToFixed(vint);
    fpoint = FixedToInt(value * 4096.0);

    return db_stream_serialize_int(vint) + "-" + db_stream_serialize_int(fpoint) + chunk;
}


fixed db_stream_unserialize_fixed(string chunk)
{
    bool negative;
    fixed ret;

    if (StringSub(chunk, StringLength(chunk), StringLength(chunk)) == "-") {
        // make sure if it's negation flag, and not a seprator - in case floating point buffer is empty
        if (StringFind(StringSub(chunk, 1, StringLength(chunk) - 1), "-", true) != c_stringNotFound) {
            negative = true;
            chunk = StringSub(chunk, 1, StringLength(chunk) - 1);
        }
    }

    // if 0.* skip int
    // if (StringSub(chunk, 1, 1) != "-") {
    //     ret = IntToFixed(db_stream_unserialize_int(StringSub(chunk, 1, StringFind(chunk, "-", true) - 1)));
    // }
    ret = IntToFixed(db_stream_unserialize_int(StringSub(chunk, 1, StringFind(chunk, "-", true) - 1)));
    ret += IntToFixed(db_stream_unserialize_int(StringSub(chunk, StringFind(chunk, "-", true) + 1, StringLength(chunk)))) / 4096.0;

    if (negative) {
        ret *= -1.0;
    }

    return ret;
}

string db_stream_serialize_string(string str)
{
    // TODO: encode special chars
    return str;
}

string db_stream_unserialize_string(string chunk)
{
    // TODO:
    return chunk;
}

void db_stream_init(structref<db_stream_t> stream)
{
    stream.buff = "";
    stream.values = 0;
}

void db_stream_load(structref<db_stream_t> stream, string buff)
{
    string search_buff;
    int loc;

    stream.buff = buff;
    stream.values = 0;

    search_buff = buff;
    while (StringLength(search_buff) > 0) {
        stream.values += 1;
        loc = StringFind(search_buff, DB_STREAM_DELIMETER, false);
        if (loc == c_stringNotFound) {
            break;
        }

        search_buff = StringSub(search_buff, loc + 1, StringLength(search_buff));
    }
}

string db_stream_pop_chunk(structref<db_stream_t> stream)
{
    string chunk;
    int delimeter_pos;
    int end_pos;

    delimeter_pos = StringFind(stream.buff, DB_STREAM_DELIMETER, true);
    if (delimeter_pos == c_stringNotFound) {
        end_pos = StringLength(stream.buff);
    }
    else {
        end_pos = delimeter_pos - 1;
    }

    if (end_pos <= 0) {
        chunk = "";
    }
    else {
        chunk = StringSub(stream.buff, 1, end_pos);
    }

    // Dbg("[stream/pop_chunk] before buff = " + stream.buff);
    // Dbg("[stream/pop_chunk] chunk = " + chunk);

    stream.buff = StringReplace(stream.buff, "", 1, delimeter_pos);
    // Dbg("[stream/pop_chunk] after buff = " + stream.buff);

    stream.values -= 1;

    return chunk;
}

void db_stream_push_chunk(structref<db_stream_t> stream, string chunk)
{
    if (stream.values > 0) {
        stream.buff += DB_STREAM_DELIMETER;
    }
    stream.buff += chunk;
    stream.values += 1;
}

void db_stream_push_int(structref<db_stream_t> stream, int number)
{
    // Dbg("[stream/push_int] value = " + IntToString(number));
    db_stream_push_chunk(stream, db_stream_serialize_int(number));
}

int db_stream_pop_int(structref<db_stream_t> stream)
{
    int value;

    value = db_stream_unserialize_int(db_stream_pop_chunk(stream));
    // Dbg("[stream/pop_bool] value = " + IntToString(value));

    return value;
}

void db_stream_push_bool(structref<db_stream_t> stream, bool value)
{
    // Dbg("[stream/push_bool] value = " + IntToString(sf_bool_to_int(value)));
    db_stream_push_chunk(stream, db_stream_serialize_int(sf_bool_to_int(value)));
}

bool db_stream_pop_bool(structref<db_stream_t> stream)
{
    int value;

    value = db_stream_unserialize_int(db_stream_pop_chunk(stream));
    // Dbg("[stream/pop_bool] value = " + IntToString(value));

    if (value) {
        return true;
    }
    else {
        return false;
    }
}

void db_stream_push_fixed(structref<db_stream_t> stream, fixed value)
{
    db_stream_push_chunk(stream, db_stream_serialize_fixed(value));
}

fixed db_stream_pop_fixed(structref<db_stream_t> stream)
{
    return db_stream_unserialize_fixed(db_stream_pop_chunk(stream));
}

// void db_stream_push_fixed(structref<db_stream_t> stream, fixed number)
// {
//     db_stream_push_int(stream, FixedToInt(number * 4096.0));
// }

// fixed db_stream_pop_fixed(structref<db_stream_t> stream)
// {
//     return IntToFixed(db_stream_pop_int(stream)) / 4096.0;
// }

void db_stream_push_string(structref<db_stream_t> stream, string str)
{
    db_stream_push_chunk(stream, db_stream_serialize_string(str));
}

string db_stream_pop_string(structref<db_stream_t> stream)
{
    return db_stream_unserialize_string(db_stream_pop_chunk(stream));
}

// void db_stream_compress(structref<db_stream_t> stream)
// {
//     int delimeter_pos = 1;
//     int begin;
//     int end;

//     while (delimeter_pos != -1) {
//         delimeter_pos = StringFind(stream.buff, string_fill(DB_STREAM_DELIMETER, 2), true);
//         begin = delimeter_pos + 1;
//         for (end = begin; end <= StringLength(stream.buff); end += 1) {
//             if (StringSub(stream.buff, end, end) != DB_STREAM_DELIMETER) { break; }
//         }

//     }
// }
