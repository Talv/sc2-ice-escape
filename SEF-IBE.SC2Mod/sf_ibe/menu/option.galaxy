const int IBE_MENU_OPTION_CTRL_MAX = 16;

struct ibe_menu_option_t {
    string name;
    int control;
    int default_value;
};

struct ibe_menu_option_data_t {
    bank storage;
    int[IBE_MENU_OPTION_CTRL_MAX] values;
};

ibe_menu_option_t[IBE_MENU_OPTION_CTRL_MAX] ibe_menu_option_ctrls;
ibe_menu_option_data_t[MAX_PLAYERS + 1] ibe_menu_option_players;
static int ibe_menu_option_offset_y = 40;
static trigger ibe_menu_opt_trig_ui;

static int ibe_menu_option_section_add(string title, int height)
{
    int section;
    int heading;

    ibe_menu_option_offset_y += 40;

    section = DialogControlCreateInPanelFromTemplate(ibe_menu_options_panel, c_triggerControlTypePanel, "IBE_Profile/SectionTemplate");
    DialogControlSetSize(section, PlayerGroupAll(), IBE_MENU_PANEL_WIDTH - 80, height);
    DialogControlSetPositionRelative(
        section,
        PlayerGroupAll(),
        c_anchorTopLeft,
        ibe_menu_options_panel,
        c_anchorTopLeft,
        40,
        ibe_menu_option_offset_y
    );

    heading = DialogControlHookup(section, c_triggerControlTypeLabel, "SummaryHeadingLabel");
    DialogControlSetPropertyAsText(
        heading,
        c_triggerControlPropertyText,
        PlayerGroupAll(),
        StringToText(title)
    );

    ibe_menu_option_offset_y += 90;

    return section;
}

static int ibe_menu_option_add_checkbox(text description, text tooltip)
{
    DialogControlCreateInPanel(ibe_menu_options_panel, c_triggerControlTypeLabel);
    DialogControlSetPropertyAsString(
        DialogControlLastCreated(),
        c_triggerControlPropertyStyle,
        PlayerGroupAll(),
        "IBE_OptLabel"
    );
    DialogControlSetPositionRelative(
        DialogControlLastCreated(),
        PlayerGroupAll(),
        c_anchorTopLeft,
        ibe_menu_options_panel,
        c_anchorTopLeft,
        120,
        ibe_menu_option_offset_y + 5
    );
    DialogControlSetPropertyAsText(
        DialogControlLastCreated(),
        c_triggerControlPropertyText,
        PlayerGroupAll(),
        description
    );
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 600, 24);

    DialogControlCreateInPanel(ibe_menu_options_panel, c_triggerControlTypeCheckBox);
    DialogControlSetPositionRelative(
        DialogControlLastCreated(),
        PlayerGroupAll(),
        c_anchorTopLeft,
        ibe_menu_options_panel,
        c_anchorTopLeft,
        80,
        ibe_menu_option_offset_y
    );

    ibe_menu_option_offset_y += 40;

    return DialogControlLastCreated();
}

static int ibe_menu_option_add_info(text description, text tooltip)
{
    DialogControlCreateInPanel(ibe_menu_options_panel, c_triggerControlTypeLabel);
    DialogControlSetPropertyAsString(
        DialogControlLastCreated(),
        c_triggerControlPropertyStyle,
        PlayerGroupAll(),
        "IBE_OptLabel"
    );
    DialogControlSetPositionRelative(
        DialogControlLastCreated(),
        PlayerGroupAll(),
        c_anchorTopLeft,
        ibe_menu_options_panel,
        c_anchorTopLeft,
        120,
        ibe_menu_option_offset_y + 5
    );
    DialogControlSetPropertyAsText(
        DialogControlLastCreated(),
        c_triggerControlPropertyText,
        PlayerGroupAll(),
        description
    );
    DialogControlSetPropertyAsText(
        DialogControlLastCreated(),
        c_triggerControlPropertyTooltip,
        PlayerGroupAll(),
        tooltip
    );
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 600, 24);

    ibe_menu_option_offset_y += 40;

    return DialogControlLastCreated();
}

static int ibe_menu_option_add_dropdown(text description, text tooltip)
{
    DialogControlCreateInPanel(ibe_menu_options_panel, c_triggerControlTypeLabel);
    DialogControlSetPropertyAsString(
        DialogControlLastCreated(),
        c_triggerControlPropertyStyle,
        PlayerGroupAll(),
        "IBE_OptLabel"
    );
    DialogControlSetPositionRelative(
        DialogControlLastCreated(),
        PlayerGroupAll(),
        c_anchorTopLeft,
        ibe_menu_options_panel,
        c_anchorTopLeft,
        80,
        ibe_menu_option_offset_y + 5
    );
    DialogControlSetPropertyAsText(
        DialogControlLastCreated(),
        c_triggerControlPropertyText,
        PlayerGroupAll(),
        description
    );
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 300, 80);

    DialogControlCreateInPanelFromTemplate(ibe_menu_options_panel, c_triggerControlTypePulldown, "IBE_GenericTemplates/PulldownTemplate");
    DialogControlSetPositionRelative(
        DialogControlLastCreated(),
        PlayerGroupAll(),
        c_anchorTopLeft,
        ibe_menu_options_panel,
        c_anchorTopLeft,
        360,
        ibe_menu_option_offset_y
    );
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 500, 80);

    ibe_menu_option_offset_y += 70;

    return DialogControlLastCreated();
}

static void ibe_menu_option_set_value(int idx, int player, int value)
{
    ibe_menu_option_players[player].values[idx] = value;

    if (DialogControlGetType(ibe_menu_option_ctrls[idx].control) == c_triggerControlTypeCheckBox) {
        DialogControlSetPropertyAsBool(
            ibe_menu_option_ctrls[idx].control,
            c_triggerControlPropertyChecked,
            PlayerGroupSingle(player),
            sf_int_to_bool(ibe_menu_option_players[player].values[idx])
        );
    }
    else if (DialogControlGetType(ibe_menu_option_ctrls[idx].control) == c_triggerControlTypePulldown) {
        DialogControlSetPropertyAsInt(
            ibe_menu_option_ctrls[idx].control,
            c_triggerControlPropertySelectionIndex,
            PlayerGroupSingle(player),
            ibe_menu_option_players[player].values[idx]
        );
    }
}

static int ibe_menu_option_create(string name)
{
    int i;

    for (i = 0; i < IBE_MENU_OPTION_CTRL_MAX; i += 1) {
        if (ibe_menu_option_ctrls[i].name != null) { continue; }
        ibe_menu_option_ctrls[i].name = name;
        return i;
    }

    return -1;
}

static int ibe_menu_option_get_idx(string key)
{
    int i;

    for (i = 0; i < IBE_MENU_OPTION_CTRL_MAX; i += 1) {
        if (ibe_menu_option_ctrls[i].name != key) { continue; }
        return i;
    }

    return -1;
}

static void ibe_menu_option_refresh_value(int player, string key, int value)
{
    int idx;

    idx = ibe_menu_option_get_idx(key);

    if (key == IBE_MENU_OPTION_UI_HIDE_MINIMAP) {
        gv_playerSettingIsEnabled[player].lv_minimap = !sf_int_to_bool(value);
        if (gv_minimapBorder != c_invalidDialogControlId) {
            UISetFrameVisible(PlayerGroupSingle(player), c_syncFrameTypeMinimapPanel, !sf_int_to_bool(value));
            DialogSetVisible(gv_minimapBorder, PlayerGroupSingle(player), !sf_int_to_bool(value));
        }
    }
    else if (key == IBE_MENU_OPTION_UI_HIDE_TIMER) {
        gv_playerSettingIsEnabled[player].lv_currentGameTimer = !sf_int_to_bool(value);
        if (gv_minimapBorder != c_invalidDialogControlId) {
            gf_MoveTimerForPlayer(player);
        }
    }
    else if (key == IBE_MENU_OPTION_UI_HIDE_COMMAND_CARD) {
        gv_playerSettingIsEnabled[player].lv_commandCard = !sf_int_to_bool(value);
        if (gv_minimapBorder != c_invalidDialogControlId) {
            gf_RefreshPlayerUiMode(player);
        }
    }
    else if (key == IBE_MENU_OPTION_UI_HIDE_CHALLENGE) {
    }
    else if (key == IBE_MENU_OPTION_UI_HIDE_SCOREBOARD) {
        gv_playerSettingIsEnabled[player].lv_leaderboard = !sf_int_to_bool(value);
        if (gv_scoreBoard != c_invalidDialogControlId) {
            DialogSetVisible(gv_scoreBoard, PlayerGroupSingle(player), !sf_int_to_bool(value));
        }
    }
    else if (key == IBE_MENU_OPTION_DISABLE_MINIMAP_COMMANDS) {
        UISetCommandAllowed(PlayerGroupSingle(player), c_uiCommandAllowMinimap, !sf_int_to_bool(value));
    }
}

static int ibe_menu_option_add_as_dpd(text description)
{
    int dpd;

    dpd = ibe_menu_option_add_dropdown(description, null);
    DialogControlAddItem(dpd, PlayerGroupAll(), StringToText("Never"));
    DialogControlAddItem(dpd, PlayerGroupAll(), StringToText("Always"));
    DialogControlAddItem(dpd, PlayerGroupAll(), StringToText("Always, unless I have other unit selected"));
    DialogControlAddItem(dpd, PlayerGroupAll(), StringToText("Always, unless I have other unit selected which I can control"));

    return dpd;
}

int ibe_menu_option_player_value(int player, string key)
{
    int idx;

    idx = ibe_menu_option_get_idx(key);

    if (idx == -1) {
        return 0;
    }

    return ibe_menu_option_players[player].values[idx];
}

void ibe_menu_options_init()
{
    int i;
    int l;
    int idx;

    ibe_menu_option_section_add("General", 300);

    idx = ibe_menu_option_create(IBE_MENU_OPTION_CAMERA_PAN);
    ibe_menu_option_ctrls[idx].control = ibe_menu_option_add_checkbox(
        StringToText("Camera pan"),
        null
    );
    ibe_menu_option_ctrls[idx].default_value = 1;

    idx = ibe_menu_option_create(IBE_MENU_OPTION_DISABLE_MINIMAP_COMMANDS);
    ibe_menu_option_ctrls[idx].control = ibe_menu_option_add_checkbox(
        StringToText("Disable minimap commands"),
        null
    );

    ibe_menu_option_add_info(StringToText("NOTICE: Hotkeys (such as W for reverse ART) can be rebinded through the native Hotkey menu of SC2"), StringToText("NOTICE: Hotkeys (such as W for reverse ART) can be rebinded through the native Hotkey menu of SC2"));

    ibe_menu_option_section_add("Hero unit auto select when", 300);

    idx = ibe_menu_option_create(IBE_MENU_OPTION_AS_NEW_CHAL);
    ibe_menu_option_ctrls[idx].control = ibe_menu_option_add_as_dpd(StringToText("New challenge is started"));
    ibe_menu_option_ctrls[idx].default_value = IBE_MENU_OPT_AS_VAL_ALWAYS;

    idx = ibe_menu_option_create(IBE_MENU_OPTION_AS_REVIVE_GENERIC);
    ibe_menu_option_ctrls[idx].control = ibe_menu_option_add_as_dpd(StringToText("Revival"));
    ibe_menu_option_ctrls[idx].default_value = IBE_MENU_OPT_AS_VAL_WHEN_NOT_IN_CTRL;

    idx = ibe_menu_option_create(IBE_MENU_OPTION_AS_REVIVE_ART);
    ibe_menu_option_ctrls[idx].control = ibe_menu_option_add_as_dpd(StringToText("Revival using ART"));
    ibe_menu_option_ctrls[idx].default_value = IBE_MENU_OPT_AS_VAL_WHEN_NOT_IN_CTRL;

    ibe_menu_option_section_add("UI", 300);

    idx = ibe_menu_option_create(IBE_MENU_OPTION_UI_HIDE_MINIMAP);
    ibe_menu_option_ctrls[idx].control = ibe_menu_option_add_checkbox(
        StringToText("Hide minimap"),
        null
    );

    idx = ibe_menu_option_create(IBE_MENU_OPTION_UI_HIDE_SCOREBOARD);
    ibe_menu_option_ctrls[idx].control = ibe_menu_option_add_checkbox(
        StringToText("Hide challenge panel info"),
        null
    );

    idx = ibe_menu_option_create(IBE_MENU_OPTION_UI_HIDE_TIMER);
    ibe_menu_option_ctrls[idx].control = ibe_menu_option_add_checkbox(
        StringToText("Hide timer"),
        null
    );

    // idx = ibe_menu_option_create(IBE_MENU_OPTION_UI_HIDE_CHALLENGE);
    // ibe_menu_option_ctrls[idx].control = ibe_menu_option_add_checkbox(
    //     StringToText("Hide challenge info"),
    //     null
    // );

    idx = ibe_menu_option_create(IBE_MENU_OPTION_UI_HIDE_COMMAND_CARD);
    ibe_menu_option_ctrls[idx].control = ibe_menu_option_add_checkbox(
        StringToText("Hide command card"),
        null
    );

    //
    ibe_menu_opt_trig_ui = TriggerCreate("ibe_menu_option_on_check");
    for (i = 1; i <= MAX_PLAYERS; i += 1) {
        if (PlayerStatus(i) != c_playerStatusActive || PlayerType(i) != c_playerTypeUser) { continue; }
        ibe_menu_option_players[i].storage = BankLoad("sefibeoptions", i);

        if (!BankSectionExists(ibe_menu_option_players[i].storage, "options")) {
            BankSectionCreate(ibe_menu_option_players[i].storage, "options");
        }

        for (l = 0; l < IBE_MENU_OPTION_CTRL_MAX; l += 1) {
            if (ibe_menu_option_ctrls[l].name == null) { continue; }

            if (BankKeyExists(ibe_menu_option_players[i].storage, "options", ibe_menu_option_ctrls[l].name)) {
                ibe_menu_option_set_value(l, i, BankValueGetAsInt(ibe_menu_option_players[i].storage, "options", ibe_menu_option_ctrls[l].name));
            }
            else {
                ibe_menu_option_set_value(l, i, ibe_menu_option_ctrls[l].default_value);
            }

            ibe_menu_option_refresh_value(i, ibe_menu_option_ctrls[l].name, ibe_menu_option_players[i].values[l]);
        }
    }

    //
    for (l = 0; l < IBE_MENU_OPTION_CTRL_MAX; l += 1) {
        if (ibe_menu_option_ctrls[l].name == null) { continue; }
        TriggerAddEventDialogControl(ibe_menu_opt_trig_ui, c_playerAny, ibe_menu_option_ctrls[l].control, c_triggerControlEventTypeChecked);
        TriggerAddEventDialogControl(ibe_menu_opt_trig_ui, c_playerAny, ibe_menu_option_ctrls[l].control, c_triggerControlEventTypeSelectionChanged);
    }
}

bool ibe_menu_option_on_check(bool test_conds, bool run_actions)
{
    int i;

    for (i = 0; i < IBE_MENU_OPTION_CTRL_MAX; i += 1) {
        if (ibe_menu_option_ctrls[i].control != EventDialogControl()) { continue; }

        if (DialogControlGetType(ibe_menu_option_ctrls[i].control) == c_triggerControlTypeCheckBox) {
            if (DialogControlGetPropertyAsBool(ibe_menu_option_ctrls[i].control, c_triggerControlPropertyChecked, EventPlayer())) {
                ibe_menu_option_players[EventPlayer()].values[i] = 1;
            }
            else {
                ibe_menu_option_players[EventPlayer()].values[i] = 0;
            }
        }
        else if (DialogControlGetType(ibe_menu_option_ctrls[i].control) == c_triggerControlTypePulldown) {
            ibe_menu_option_players[EventPlayer()].values[i] = DialogControlGetPropertyAsInt(EventDialogControl(), c_triggerControlPropertySelectionIndex, EventPlayer());
        }

        ibe_menu_option_refresh_value(EventPlayer(), ibe_menu_option_ctrls[i].name, ibe_menu_option_players[EventPlayer()].values[i]);

        BankValueSetFromInt(ibe_menu_option_players[EventPlayer()].storage, "options", ibe_menu_option_ctrls[i].name, ibe_menu_option_players[EventPlayer()].values[i]);
        BankSave(ibe_menu_option_players[EventPlayer()].storage);
    }

    return true;
}
