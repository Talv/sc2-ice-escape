static ibe_profile_section_t[IBE_PROFILE_SECTION_MAX] ibe_profile_sections;
static ibe_profile_section_info_t[IBE_PROFILE_SECTION_MAX] ibe_profile_section_infos;
static int[MAX_PLAYERS + 1] ibe_menu_profile_dpd_index;

static int ibe_profile_dpd_player;
static int ibe_profile_ct_nav;
static int ibe_profile_ct_btn_general;
static int ibe_profile_ct_btn_rewards;
static int ibe_profile_ct_content;
static int ibe_profile_ct_content_general;
static int ibe_profile_ct_content_rewards;
static int ibe_profile_ct_reward_glaze_list;

static int[IBE_REWARD_MAX] ibe_profile_ct_reward_item;
static int[IBE_REWARD_MAX] ibe_profile_ct_reward_btn;

static int[MAX_PLAYERS + 1] ibe_profile_current_cat;

//
// GENERAL
//

static void ibe_profile_section_add(string title, int relative_top, int relative_y, structref<ibe_profile_section_t> sect)
{
    sect.panel = DialogControlCreateInPanelFromTemplate(ibe_profile_ct_content_general, c_triggerControlTypePanel, "IBE_Profile/SectionTemplate");
    DialogControlSetSize(sect.panel, PlayerGroupAll(), IBE_MENU_PANEL_WIDTH - 80 - 300, 300);
    DialogControlSetPositionRelative(
        sect.panel,
        PlayerGroupAll(),
        c_anchorTopLeft,
        relative_top,
        c_anchorTopLeft,
        0,
        relative_y
    );

    sect.lbl_heading = DialogControlHookup(sect.panel, c_triggerControlTypeLabel, "SummaryHeadingLabel");
    DialogControlSetPropertyAsText(
        sect.lbl_heading,
        c_triggerControlPropertyText,
        PlayerGroupAll(),
        StringToText(title)
    );
}

static void ibe_profile_section_info_add(structref<ibe_profile_section_t> sect, string title, structref<ibe_profile_section_info_t> info)
{
    info.panel = DialogControlCreateInPanelFromTemplate(ibe_profile_ct_content_general, c_triggerControlTypePanel, "IBE_Profile/ProfileLineTemplate");
    DialogControlSetSize(info.panel, PlayerGroupAll(), DialogControlGetWidth(sect.panel, 1), 28);
    DialogControlSetPositionRelative(
        info.panel,
        PlayerGroupAll(),
        c_anchorTopLeft,
        sect.panel,
        c_anchorTopLeft,
        80,
        90 + (sect.info_count * 30)
    );

    info.lbl_title = DialogControlHookup(info.panel, c_triggerControlTypeLabel, "TextTitle");
    DialogControlSetPropertyAsText(
        info.lbl_title,
        c_triggerControlPropertyText,
        PlayerGroupAll(),
        StringToText(title)
    );
    info.lbl_value = DialogControlHookup(info.panel, c_triggerControlTypeLabel, "TextValue");
    DialogControlSetPropertyAsText(
        info.lbl_value,
        c_triggerControlPropertyText,
        PlayerGroupAll(),
        StringToText("")
    );

    sect.info_count += 1;
}

static void ibe_profile_section_info_set_value(structref<ibe_profile_section_info_t> info, int player, text value)
{
    DialogControlSetPropertyAsText(
        info.lbl_value,
        c_triggerControlPropertyText,
        PlayerGroupSingle(player),
        value
    );
}

static void ibe_menu_profile_general_init()
{
    ibe_profile_section_add("Rating", ibe_profile_ct_content_general, 0, ibe_profile_sections[IBE_PROFILE_SECTION_RATING]);
    ibe_profile_section_info_add(
        ibe_profile_sections[IBE_PROFILE_SECTION_RATING],
        "Revives",
        ibe_profile_section_infos[IBE_PROFILE_SECTION_INFO_REVIVES]
    );
    ibe_profile_section_info_add(
        ibe_profile_sections[IBE_PROFILE_SECTION_RATING],
        "Deaths",
        ibe_profile_section_infos[IBE_PROFILE_SECTION_INFO_DEATHS]
    );
    ibe_profile_section_info_add(
        ibe_profile_sections[IBE_PROFILE_SECTION_RATING],
        "Completed challenges",
        ibe_profile_section_infos[IBE_PROFILE_SECTION_INFO_CHALLENGES_COMPLETED_TOTAL]
    );
    ibe_profile_section_info_add(
        ibe_profile_sections[IBE_PROFILE_SECTION_RATING],
        "Acquired powerups",
        ibe_profile_section_infos[IBE_PROFILE_SECTION_INFO_POWERUPS_ACQUIRED_TOTAL]
    );
    ibe_profile_section_info_add(
        ibe_profile_sections[IBE_PROFILE_SECTION_RATING],
        "Pushed buttons",
        ibe_profile_section_infos[IBE_PROFILE_SECTION_INFO_BUTTONS_PUSHED_TOTAL]
    );

    ibe_profile_section_add("Games", ibe_profile_ct_content_general, 270, ibe_profile_sections[IBE_PROFILE_SECTION_GENERAL]);
    ibe_profile_section_info_add(
        ibe_profile_sections[IBE_PROFILE_SECTION_GENERAL],
        "Games played",
        ibe_profile_section_infos[IBE_PROFILE_SECTION_INFO_GAMES_PLAYED]
    );
    ibe_profile_section_info_add(
        ibe_profile_sections[IBE_PROFILE_SECTION_GENERAL],
        "Total time played",
        ibe_profile_section_infos[IBE_PROFILE_SECTION_INFO_TIME_PLAYED]
    );
    ibe_profile_section_info_add(
        ibe_profile_sections[IBE_PROFILE_SECTION_GENERAL],
        "Escapes",
        ibe_profile_section_infos[IBE_PROFILE_SECTION_INFO_ESCAPES]
    );
    ibe_profile_section_info_add(
        ibe_profile_sections[IBE_PROFILE_SECTION_GENERAL],
        "Fastest escape",
        ibe_profile_section_infos[IBE_PROFILE_SECTION_INFO_ESCAPE_BEST_TIME]
    );

    ibe_profile_section_add("Abilities usage", ibe_profile_ct_content_general, 480, ibe_profile_sections[IBE_PROFILE_SECTION_ABIL]);
    ibe_profile_section_info_add(
        ibe_profile_sections[IBE_PROFILE_SECTION_ABIL],
        "Power boost",
        ibe_profile_section_infos[IBE_PROFILE_SECTION_INFO_ABIL_S1]
    );
    ibe_profile_section_info_add(
        ibe_profile_sections[IBE_PROFILE_SECTION_ABIL],
        "Propel",
        ibe_profile_section_infos[IBE_PROFILE_SECTION_INFO_ABIL_S2]
    );
    ibe_profile_section_info_add(
        ibe_profile_sections[IBE_PROFILE_SECTION_ABIL],
        "Throw essence",
        ibe_profile_section_infos[IBE_PROFILE_SECTION_INFO_ABIL_S3]
    );
    ibe_profile_section_info_add(
        ibe_profile_sections[IBE_PROFILE_SECTION_ABIL],
        "ART",
        ibe_profile_section_infos[IBE_PROFILE_SECTION_INFO_ABIL_S4]
    );
    ibe_profile_section_info_add(
        ibe_profile_sections[IBE_PROFILE_SECTION_ABIL],
        "Formed shades",
        ibe_profile_section_infos[IBE_PROFILE_SECTION_INFO_ABIL_S5]
    );
    ibe_profile_section_info_add(
        ibe_profile_sections[IBE_PROFILE_SECTION_ABIL],
        "Used shades",
        ibe_profile_section_infos[IBE_PROFILE_SECTION_INFO_ABIL_S6]
    );
    ibe_profile_section_info_add(
        ibe_profile_sections[IBE_PROFILE_SECTION_ABIL],
        "Revives with Throw essence",
        ibe_profile_section_infos[IBE_PROFILE_SECTION_INFO_ABIL_S7]
    );
    ibe_profile_section_info_add(
        ibe_profile_sections[IBE_PROFILE_SECTION_ABIL],
        "Revives with ART",
        ibe_profile_section_infos[IBE_PROFILE_SECTION_INFO_ABIL_S8]
    );
}

static void ibe_menu_profile_show_general(int for_player, int player)
{
    int i;
    int l;
    int chal_completed;
    int powerups;
    int buttons;
    int escapes;
    int games_played;
    fixed escape_fastest = -1.0;
    int time_played;
    text txt;

    for (i = 0; i < IBE_GM_MAX; i += 1) {
        escapes += ibe_stat_profiles[player].gm[i].games_completed;
        games_played += ibe_stat_profiles[player].gm[i].games_played;
        time_played += ibe_stat_profiles[player].gm[i].time_played;
        if (ibe_stat_profiles[player].gm[i].games_completed > 0) {
            if (escape_fastest == -1.0 || ibe_stat_profiles[player].gm[i].escape_best_time < escape_fastest) {
                escape_fastest = ibe_stat_profiles[player].gm[i].escape_best_time;
            }
        }

        for (l = 0; l < IBE_STAT_CHALLENGE_MAX; l += 1) {
            chal_completed += ibe_stat_profiles[player].gm[i].chal[l].completions;
            powerups += ibe_stat_profiles[player].gm[i].chal[l].powerups;
            buttons += ibe_stat_profiles[player].gm[i].chal[l].buttons;
        }
    }

    ibe_profile_section_info_set_value(
        ibe_profile_section_infos[IBE_PROFILE_SECTION_INFO_REVIVES],
        for_player,
        FormatNumber(ibe_stat_profiles[player].revives)
    );
    ibe_profile_section_info_set_value(
        ibe_profile_section_infos[IBE_PROFILE_SECTION_INFO_DEATHS],
        for_player,
        FormatNumber(ibe_stat_profiles[player].deaths)
    );
    ibe_profile_section_info_set_value(
        ibe_profile_section_infos[IBE_PROFILE_SECTION_INFO_CHALLENGES_COMPLETED_TOTAL],
        for_player,
        FormatNumber(chal_completed)
    );
    ibe_profile_section_info_set_value(
        ibe_profile_section_infos[IBE_PROFILE_SECTION_INFO_POWERUPS_ACQUIRED_TOTAL],
        for_player,
        FormatNumber(powerups)
    );
    ibe_profile_section_info_set_value(
        ibe_profile_section_infos[IBE_PROFILE_SECTION_INFO_BUTTONS_PUSHED_TOTAL],
        for_player,
        FormatNumber(buttons)
    );

    ibe_profile_section_info_set_value(
        ibe_profile_section_infos[IBE_PROFILE_SECTION_INFO_GAMES_PLAYED],
        for_player,
        FormatNumber(games_played)
    );
    txt = StringToText("");
    if ((time_played / (3600  * 24)) > 0) {
        txt += IntToText(time_played / (3600  * 24)) + StringToText("d ");
    }
    txt += TextTimeFormat(StringToText("<hour2/>:<min2/>:<sec2/>"), time_played % (3600  * 24));
    ibe_profile_section_info_set_value(
        ibe_profile_section_infos[IBE_PROFILE_SECTION_INFO_TIME_PLAYED],
        for_player,
        txt
    );
    ibe_profile_section_info_set_value(
        ibe_profile_section_infos[IBE_PROFILE_SECTION_INFO_ESCAPES],
        for_player,
        FormatNumber(escapes)
    );
    if (escape_fastest == -1.0) {
        ibe_profile_section_info_set_value(
            ibe_profile_section_infos[IBE_PROFILE_SECTION_INFO_ESCAPE_BEST_TIME],
            for_player,
            StringToText("-")
        );
    }
    else {
        ibe_profile_section_info_set_value(
            ibe_profile_section_infos[IBE_PROFILE_SECTION_INFO_ESCAPE_BEST_TIME],
            for_player,
            sf_format_time(escape_fastest)
        );
    }

    // abils
    for (i = 0; i < IBE_STAT_ABIL_MAX; i += 1) {
        ibe_profile_section_info_set_value(
            ibe_profile_section_infos[IBE_PROFILE_SECTION_INFO_ABIL_S1 + i],
            for_player,
            FormatNumber(ibe_stat_profiles[player].abils[i])
        );
    }
}

//
// REWARDS
//

static void ibe_menu_profile_reward_add(int id, text title, text description, string icon)
{
    int ct_panel;
    int ct_label;
    int ct_btn;
    int ct_icon;

    ct_panel = DialogControlCreateInPanelFromTemplate(ibe_profile_ct_reward_glaze_list, c_triggerControlTypePanel, "IBE_Profile/RewardItemTemplate");
    DialogControlSetPosition(ct_panel, PlayerGroupAll(), c_anchorTopLeft, 200 * ((id - 1) % 4), 155 * ((id - 1) / 4));

    ct_label = DialogControlHookup(ct_panel, c_triggerControlTypeLabel, "Name");
    ct_btn = DialogControlHookup(ct_panel, c_triggerControlTypeButton, "Button");
    ct_icon = DialogControlHookup(ct_btn, c_triggerControlTypeImage, "RewardButtonIcon");

    DialogControlSetEnabled(ct_panel, PlayerGroupAll(), false);
    DialogControlSetPropertyAsText(ct_label, c_triggerControlPropertyText, PlayerGroupAll(), title);
    DialogControlSetPropertyAsText(ct_btn, c_triggerControlPropertyTooltip, PlayerGroupAll(), description);
    DialogControlSetPropertyAsString(ct_icon, c_triggerControlPropertyImage, PlayerGroupAll(), icon);

    //
    ibe_profile_ct_reward_item[id] = ct_panel;
    ibe_profile_ct_reward_btn[id] = ct_btn;
    TriggerAddEventDialogControl(TriggerFind("ibe_menu_profile_on_reward_select"), c_playerAny, ibe_profile_ct_reward_btn[id], c_triggerControlEventTypeClick);
}

static void ibe_menu_profile_rewards_init()
{
    int i;

    TriggerCreate("ibe_menu_profile_on_reward_select");

    for (i = 0; i < IBE_REWARD_MAX; i += 1) {
        if (sfi_rewards[i].kind == -1) { continue ;}
        ibe_menu_profile_reward_add(i, sfi_rewards[i].title, sfi_rewards[i].desc, sfi_rewards[i].icon);
    }
}

static void ibe_menu_profile_show_rewards(int for_player, int player)
{
    int i;

    for (i = 0; i < IBE_REWARD_MAX; i += 1) {
        if (sfi_rewards[i].kind == -1) { continue ;}
        DialogControlSetEnabled(ibe_profile_ct_reward_item[i], PlayerGroupSingle(for_player), sfi_reward_player_has_reward(player, i));
        DialogControlSetPropertyAsBool(ibe_profile_ct_reward_btn[i], c_triggerControlPropertyToggled, PlayerGroupSingle(for_player), sfi_reward_player_get_active_reward(player, sfi_rewards[i].kind) == i);
    }
}

//
// MAIN
//

void ibe_profile_init()
{
    int i;
    int l;
    int primary_section;
    int line;
    int temp;
    int temp2;

    //
    ibe_profile_ct_nav = DialogControlHookup(ibe_profile_panel, c_triggerControlTypePanel, "Nav");
    ibe_profile_ct_content = DialogControlHookup(ibe_profile_panel, c_triggerControlTypePanel, "Content");
    ibe_profile_ct_content_general = DialogControlHookup(ibe_profile_ct_content, c_triggerControlTypePanel, "General");
    ibe_profile_ct_content_rewards = DialogControlHookup(ibe_profile_ct_content, c_triggerControlTypePanel, "Rewards");
    ibe_profile_ct_reward_glaze_list = DialogControlHookup(ibe_profile_ct_content_rewards, c_triggerControlTypePanel, "Glaze/List");

    ibe_profile_dpd_player = DialogControlHookup(ibe_profile_ct_nav, c_triggerControlTypePulldown, "PlayerPulldown");
    TriggerAddEventDialogControl(TriggerCreate("ibe_menu_profile_on_player_dropdown"), c_playerAny, ibe_profile_dpd_player, c_triggerControlEventTypeSelectionChanged);
    ibe_profile_ct_btn_general = DialogControlHookup(ibe_profile_ct_nav, c_triggerControlTypeButton, "GeneralButton");
    ibe_profile_ct_btn_rewards = DialogControlHookup(ibe_profile_ct_nav, c_triggerControlTypeButton, "RewardsButton");
    TriggerCreate("ibe_menu_profile_on_click");
    TriggerAddEventDialogControl(TriggerFind("ibe_menu_profile_on_click"), c_playerAny, ibe_profile_ct_btn_general, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(TriggerFind("ibe_menu_profile_on_click"), c_playerAny, ibe_profile_ct_btn_rewards, c_triggerControlEventTypeClick);

    //
    ibe_menu_profile_general_init();
    ibe_menu_profile_rewards_init();

    //
    l = 1;
    for (i = 1; i <= MAX_PLAYERS; i += 1) {
        if (PlayerType(i) != c_playerTypeUser) { continue; }
        DialogControlAddItem(ibe_profile_dpd_player, PlayerGroupAll(), PlayerName(i));
        DialogControlSelectItem(ibe_profile_dpd_player, PlayerGroupSingle(i), l);
        ibe_menu_profile_dpd_index[l] = i;
        l += 1;
    }
}

void ibe_menu_profile_show_cat(int for_player, int category)
{
    ibe_profile_current_cat[for_player] = category;

    DialogControlSetVisible(ibe_profile_ct_content_general, PlayerGroupSingle(for_player), category == IBE_MENU_PROFILE_CAT_GENERAL);
    DialogControlSetVisible(ibe_profile_ct_content_rewards, PlayerGroupSingle(for_player), category == IBE_MENU_PROFILE_CAT_REWARDS);

    DialogControlSetPropertyAsBool(ibe_profile_ct_btn_general, c_triggerControlPropertyToggled, PlayerGroupSingle(for_player), category == IBE_MENU_PROFILE_CAT_GENERAL);
    DialogControlSetPropertyAsBool(ibe_profile_ct_btn_rewards, c_triggerControlPropertyToggled, PlayerGroupSingle(for_player), category == IBE_MENU_PROFILE_CAT_REWARDS);
}

void ibe_menu_profile_refresh(int for_player)
{
    int value;

    value = DialogControlGetSelectedItem(ibe_profile_dpd_player, EventPlayer());

    if (ibe_profile_current_cat[for_player] == 0) {
        ibe_menu_profile_show_cat(for_player, IBE_MENU_PROFILE_CAT_GENERAL);
    }

    ibe_menu_profile_show_general(for_player, ibe_menu_profile_dpd_index[value]);
    ibe_menu_profile_show_rewards(for_player, ibe_menu_profile_dpd_index[value]);
}

bool ibe_menu_profile_on_player_dropdown(bool test_conds, bool run_actions)
{
    int value;

    value = DialogControlGetSelectedItem(ibe_profile_dpd_player, EventPlayer());

    ibe_menu_profile_show_general(EventPlayer(), ibe_menu_profile_dpd_index[value]);
    ibe_menu_profile_show_rewards(EventPlayer(), ibe_menu_profile_dpd_index[value]);

    return true;
}

bool ibe_menu_profile_on_click(bool test_conds, bool run_actions)
{
    if (EventDialogControl() == ibe_profile_ct_btn_general) {
        ibe_menu_profile_show_cat(EventPlayer(), IBE_MENU_PROFILE_CAT_GENERAL);
    }
    else if (EventDialogControl() == ibe_profile_ct_btn_rewards) {
        ibe_menu_profile_show_cat(EventPlayer(), IBE_MENU_PROFILE_CAT_REWARDS);
    }

    return true;
}

bool ibe_menu_profile_on_reward_select(bool test_conds, bool run_actions)
{
    int i;

    for (i = 0; i < IBE_REWARD_MAX; i += 1) {
        if (ibe_profile_ct_reward_btn[i] != EventDialogControl()) { continue; }
        sfi_reward_player_activate_reward(EventPlayer(), i);
        return true;
    }

    return false;
}
