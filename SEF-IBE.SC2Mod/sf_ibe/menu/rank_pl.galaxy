int[MAX_PLAYERS + 1] ibe_menu_rank_pl_map_idx;

int ibe_menu_rank_pl_row_count()
{
    int i;
    int count = 0;

    for (i = 1; i <= MAX_PLAYERS; i += 1) {
        if (ibe_stat_profiles[i].storage == null) { continue; }
        ibe_menu_rank_pl_map_idx[count] = i;
        count += 1;
    }

    return count;
}

text ibe_menu_rank_pl_cell_text(int idx, int col, int row)
{
    int i;
    int l;
    int player;
    text txt = StringToText("");
    int chal_completed;
    int powerups;
    int escapes;
    fixed escape_fastest = -1.0;
    int chal_per_ch;
    int[IBE_STAT_CHALLENGE_MAX] chal_compl_table;
    fixed[IBE_STAT_CHALLENGE_MAX] chal_compl_times;
    fixed chal_total_time;

    player = ibe_menu_rank_pl_map_idx[idx];

    for (i = 0; i < IBE_GM_MAX; i += 1) {
        escapes += ibe_stat_profiles[player].gm[i].games_completed;
        if (ibe_stat_profiles[player].gm[i].games_completed > 0) {
            if (escape_fastest == -1.0 || ibe_stat_profiles[player].gm[i].escape_best_time < escape_fastest) {
                escape_fastest = ibe_stat_profiles[player].gm[i].escape_best_time;
            }
        }

        for (l = 0; l < IBE_STAT_CHALLENGE_MAX; l += 1) {
            chal_completed += ibe_stat_profiles[player].gm[i].chal[l].completions;
            powerups += ibe_stat_profiles[player].gm[i].chal[l].powerups;

            if (ibe_stat_profiles[player].gm[i].chal[l].completions > 0) {
                chal_compl_table[l] += ibe_stat_profiles[player].gm[i].chal[l].completions;
                if (chal_compl_times[l] == 0 || ibe_stat_profiles[player].gm[i].chal[l].best_time < chal_compl_times[l]) {
                    chal_compl_times[l] = ibe_stat_profiles[player].gm[i].chal[l].best_time;
                }
            }
        }
    }
    for (i = 0; i < IBE_STAT_CHALLENGE_MAX; i += 1) {
        if (chal_compl_table[i] == 0) { continue; }
        chal_per_ch += 1;
        chal_total_time += chal_compl_times[i];
    }

    if (col == 0) {
        txt = StringToText(IntToString(row + 1) + ".");
    }
    else if (col == 1) {
        txt = sf_player_name_colored(player);
    }
    else if (col == 2) {
        txt = IntToText(ibe_stat_profiles[player].revives);
    }
    else if (col == 3) {
        txt = IntToText(ibe_stat_profiles[player].deaths);
    }
    else if (col == 4) {
        if (chal_per_ch >= lv_getTotalCount()) {
            txt = sf_format_time(chal_total_time);
        }
        else {
            txt = StringToText("-");
        }
    }
    else if (col == 5) {
        if (chal_per_ch >= lv_getTotalCount()) {
            txt = IntToText(chal_completed);
        }
        else {
            txt = IntToText(chal_per_ch) + StringToText("/") + IntToText(lv_getTotalCount());
        }
    }
    else if (col == 6) {
        txt = IntToText(powerups);
    }
    else if (col == 7) {
        txt = IntToText(escapes);
    }
    else if (col == 8) {
        if (escape_fastest == -1.0) {
            txt = StringToText("-");
        }
        else {
            txt = sf_format_time(escape_fastest);
        }
    }

    return txt;
}

text ibe_menu_rank_pl_cell_tooltip(int idx, int col, int row)
{
    bool first = true;
    int i;
    int l;
    int player;
    text txt = StringToText("");
    int chal_completed;
    int[IBE_STAT_CHALLENGE_MAX] chal_compl_table;

    player = ibe_menu_rank_pl_map_idx[idx];

    for (i = 0; i < IBE_GM_MAX; i += 1) {
        for (l = 0; l < IBE_STAT_CHALLENGE_MAX; l += 1) {
            chal_completed += ibe_stat_profiles[player].gm[i].chal[l].completions;
            if (ibe_stat_profiles[player].gm[i].chal[l].completions) {
                chal_compl_table[l] += ibe_stat_profiles[player].gm[i].chal[l].completions;
            }
        }
    }

    if (col == 5) {
        for (i = 0; i < IBE_STAT_CHALLENGE_MAX; i += 1) {
            if (!lv_info[i].exists) { continue; }
            if (!first) {
                txt += StringToText("<n/>");
            }
            first = false;
            txt += StringToText(sf_chal_name(i, true) + ": ") + StringToText("<c val=\"00ff00\">") + IntToText(chal_compl_table[i]) + StringToText("</c>");
        }
    }

    return txt;
}

int ibe_menu_rank_pl_cell_sort_value(int idx, int col)
{
    int i;
    int l;
    int player;
    text txt = StringToText("");
    int chal_completed;
    int powerups;
    int escapes;
    fixed escape_fastest = -1.0;
    int chal_per_ch;
    int[IBE_STAT_CHALLENGE_MAX] chal_compl_table;
    fixed[IBE_STAT_CHALLENGE_MAX] chal_compl_times;
    fixed chal_total_time;

    player = ibe_menu_rank_pl_map_idx[idx];

    for (i = 0; i < IBE_GM_MAX; i += 1) {
        escapes += ibe_stat_profiles[player].gm[i].games_completed;
        if (ibe_stat_profiles[player].gm[i].games_completed > 0) {
            if (escape_fastest == -1.0 || ibe_stat_profiles[player].gm[i].escape_best_time < escape_fastest) {
                escape_fastest = ibe_stat_profiles[player].gm[i].escape_best_time;
            }
        }

        for (l = 0; l < IBE_STAT_CHALLENGE_MAX; l += 1) {
            chal_completed += ibe_stat_profiles[player].gm[i].chal[l].completions;
            powerups += ibe_stat_profiles[player].gm[i].chal[l].powerups;

            if (ibe_stat_profiles[player].gm[i].chal[l].completions > 0) {
                chal_compl_table[l] += ibe_stat_profiles[player].gm[i].chal[l].completions;
                if (chal_compl_times[l] == 0 || ibe_stat_profiles[player].gm[i].chal[l].best_time < chal_compl_times[l]) {
                    chal_compl_times[l] = ibe_stat_profiles[player].gm[i].chal[l].best_time;
                }
            }
        }
    }
    for (i = 0; i < IBE_STAT_CHALLENGE_MAX; i += 1) {
        if (chal_compl_table[i] == 0) { continue; }
        chal_per_ch += 1;
    }

    if (col == 1) {
        return player;
    }
    else if (col == 2) {
        return ibe_stat_profiles[player].revives;
    }
    else if (col == 3) {
        return ibe_stat_profiles[player].deaths;
    }
    else if (col == 4) {
        return ibe_ui_dg_fixed_to_sort(chal_total_time);
    }
    else if (col == 5) {
        if (chal_per_ch >= lv_getTotalCount()) {
            return chal_completed;
        }
        else {
            return chal_per_ch;
        }
    }
    else if (col == 6) {
        return powerups;
    }
    else if (col == 7) {
        return escapes;
    }
    else if (col == 8) {
        if (escape_fastest == -1.0) {
            return 0xffff;
        }
        else {
            return ibe_ui_dg_fixed_to_sort(escape_fastest);
        }
    }

    return 0;
}

void ibe_menu_rank_pl_init(structref<ibe_menu_rank_sect_t> rank_sect)
{
    ibe_ui_dg_set_handlers(
        rank_sect.dg,
        ibe_menu_rank_pl_row_count,
        ibe_menu_rank_pl_cell_text,
        ibe_menu_rank_pl_cell_tooltip,
        ibe_menu_rank_pl_cell_sort_value,
        TriggerCreate("ibe_menu_rank_gl_on_btn_sort")
    );
    ibe_ui_dg_column_add(rank_sect.dg, StringToText("No."), false);
    ibe_ui_dg_column_set_size(rank_sect.dg, IBE_UI_DG_COL_LAST_CREATED, 0.5, -1, -1);
    ibe_ui_dg_column_add(rank_sect.dg, StringToText("Player"), true);
    ibe_ui_dg_column_set_size(rank_sect.dg, IBE_UI_DG_COL_LAST_CREATED, 1.7, -1, -1);
    ibe_ui_dg_column_add(rank_sect.dg, StringToText("Revives"), true);
    ibe_ui_dg_column_set_size(rank_sect.dg, IBE_UI_DG_COL_LAST_CREATED, 0.9, -1, -1);
    ibe_ui_dg_column_add(rank_sect.dg, StringToText("Deaths"), true);
    ibe_ui_dg_column_set_size(rank_sect.dg, IBE_UI_DG_COL_LAST_CREATED, 0.9, -1, -1);
    ibe_ui_dg_column_add(rank_sect.dg, StringToText("Challenges time rocord (in total)"), true);
    ibe_ui_dg_column_add(rank_sect.dg, StringToText("Challenges completed (in total)"), true);
    ibe_ui_dg_column_add(rank_sect.dg, StringToText("Powerups acquired (in total)"), true);
    ibe_ui_dg_column_add(rank_sect.dg, StringToText("Escapes"), true);
    ibe_ui_dg_column_add(rank_sect.dg, StringToText("Fastest escape"), true);
    ibe_ui_dg_column_set_default_sort(rank_sect.dg, IBE_UI_DG_COL_LAST_CREATED, true);
}

bool ibe_menu_rank_gl_on_btn_sort(bool test_conds, bool run_actions)
{
    ibe_ui_dg_handle_ui_event(ibe_menu_rank_sections[IBE_MENU_RANK_SECTION_PLAYERS].dg);

    return true;
}
