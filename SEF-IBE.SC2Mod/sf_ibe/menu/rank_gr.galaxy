const int IBE_MENU_RANK_GR_RECORD_COMPLETED = 0;
const int IBE_MENU_RANK_GR_RECORD_BUTTONS = 1;
const int IBE_MENU_RANK_GR_RECORD_REV_ESSENCE = 2;
const int IBE_MENU_RANK_GR_RECORD_REV_ART = 3;

struct ibe_menu_rank_gr_record_t {
    int best_player;
    int best_value;
    int[MAX_PLAYERS + 1] player_values;
};

static void ibe_menu_rank_gr_get_record(int type, structref<ibe_stat_gresult_t> gres, structref<ibe_menu_rank_gr_record_t> result)
{
    int i;
    int l;
    int abil_idx = -1;

    // reset
    result.best_player = 0;
    result.best_value = 0;
    for (i = 0; i <= MAX_PLAYERS; i += 1) {
        result.player_values[i] = 0;
    }

    // collect info
    if (type == IBE_MENU_RANK_GR_RECORD_COMPLETED) {
        for (i = 0; i < IBE_STAT_CHALLENGE_MAX; i += 1) {
            if (!gres.challenges[i].completed_by) { continue; }
            result.player_values[gres.challenges[i].completed_by] += 1;
        }
    }
    else if (type == IBE_MENU_RANK_GR_RECORD_BUTTONS) {
        for (i = 0; i < IBE_STAT_CHALLENGE_MAX; i += 1) {
            if (!gres.challenges[i].completed_by) { continue; }
            for (l = 0; l < IBE_STAT_CHALLENGE_BUTTON_MAX; l += 1) {
                if (!gres.challenges[i].buttons_by[l]) { continue; }
                result.player_values[gres.challenges[i].buttons_by[l]] += 1;
            }
        }
    }
    else {
        if (type == IBE_MENU_RANK_GR_RECORD_REV_ESSENCE) {
            abil_idx = IBE_STAT_PROFILE_ABIL_THROW_ESSENCE_REVIVE;
        }
        else if (type == IBE_MENU_RANK_GR_RECORD_REV_ART) {
            abil_idx = IBE_STAT_PROFILE_ABIL_ART_REVIVE;
        }
        for (i = 1; i <= MAX_PLAYERS; i += 1) {
            if (!gres.players[i].exists) { continue; }
            result.player_values[i] += gres.players[i].abilities_used[abil_idx];
        }
    }

    // seek best
    for (i = 1; i <= MAX_PLAYERS; i += 1) {
        if (!gres.players[i].exists) { continue; }
        if (result.best_value < result.player_values[i] || result.best_value == 0) {
            result.best_value = result.player_values[i];
            result.best_player = i;
        }
    }
}

int ibe_menu_rank_gr_row_count()
{
    return ibe_stat_grl_list_counter;
}

text ibe_menu_rank_gr_cell_text(int idx, int col, int row)
{
    int i;
    int l;
    text txt = StringToText("");
    bool first = true;
    structref<ibe_stat_gresult_t> gres;
    ibe_menu_rank_gr_record_t rec_result;
    int tmp;

    gres = ibe_stat_grl_list[idx];

    if (col == 0) {
        txt = StringToText(IntToString(row + 1) + ".");
    }
    else if (col == 1) {
        for (i = 1; i <= MAX_PLAYERS; i += 1) {
            if (!gres.players[i].exists) { continue; }
            if (!first) {
                txt += StringToText(", ");
            }
            first = false;
            txt += gres.players[i].tname;
        }
    }
    else if (col == 2) {
        return ibe_gm_name_diff(ibe_gm_diff_from_code(gres.gm_code));
    }
    else if (col == 3) {
        return ibe_gm_name_speed(ibe_gm_speed_from_code(gres.gm_code));
    }
    else if (col == 4) {
        ibe_menu_rank_gr_get_record(IBE_MENU_RANK_GR_RECORD_COMPLETED, gres, rec_result);
        txt = gres.players[rec_result.best_player].tname;
    }
    else if (col == 5) {
        ibe_menu_rank_gr_get_record(IBE_MENU_RANK_GR_RECORD_BUTTONS, gres, rec_result);
        txt = gres.players[rec_result.best_player].tname;
    }
    else if (col == 6) {
        if (gres.escape_time == 0.0) {
            for (i = 0; i < IBE_STAT_CHALLENGE_MAX; i += 1) {
                if (gres.challenges[i].completed_by == 0) { continue; }
                tmp += 1;
            }
            txt = StringToText(IntToString(tmp) + " / " + IntToString(lv_getTotalCount()));
        }
        else {
            txt = sf_format_time(gres.escape_time);
        }
    }
    else {
        return null;
    }

    return txt;
}

text ibe_menu_rank_gr_cell_tooltip(int idx, int col, int row)
{
    int i;
    int l;
    text txt = StringToText("");
    text[MAX_PLAYERS + 1] txt_per_pl;
    bool first = true;
    structref<ibe_stat_gresult_t> gres;
    ibe_menu_rank_gr_record_t rec_result;
    ibe_menu_rank_gr_record_t[4] rec_result_arr;

    gres = ibe_stat_grl_list[idx];

    if (col == 1) {
        for (i = 1; i <= MAX_PLAYERS; i += 1) {
            if (!gres.players[i].exists) { continue; }
            if (!first) {
                txt += StringToText("<n/>");
            }
            first = false;
            txt += gres.players[i].tname;
            if (gres.players[i].left) {
                txt += StringToText(" (left)");
            }
            txt += StringToText(" - Level ") + IntToText(gres.players[i].level);
        }
    }
    else if (col == 4) {
        ibe_menu_rank_gr_get_record(IBE_MENU_RANK_GR_RECORD_COMPLETED, gres, rec_result);
        for (i = 1; i <= MAX_PLAYERS; i += 1) {
            if (!gres.players[i].exists) { continue; }
            if (!first) {
                txt += StringToText("<n/>");
            }
            first = false;
            txt += gres.players[i].tname + StringToText(" - ") + IntToText(rec_result.player_values[i]) + StringToText(" challenges completed");
        }
    }
    else if (col == 5) {
        ibe_menu_rank_gr_get_record(
            IBE_MENU_RANK_GR_RECORD_BUTTONS,
            gres,
            rec_result_arr[IBE_MENU_RANK_GR_RECORD_BUTTONS]
        );
        ibe_menu_rank_gr_get_record(
            IBE_MENU_RANK_GR_RECORD_REV_ESSENCE,
            gres,
            rec_result_arr[IBE_MENU_RANK_GR_RECORD_REV_ESSENCE]
        );
        ibe_menu_rank_gr_get_record(
            IBE_MENU_RANK_GR_RECORD_REV_ART,
            gres,
            rec_result_arr[IBE_MENU_RANK_GR_RECORD_REV_ART]
        );

        for (i = 1; i <= MAX_PLAYERS; i += 1) {
            if (!gres.players[i].exists) { continue; }
            if (!first) {
                txt += StringToText("<n/>");
            }
            first = false;
            txt += gres.players[i].tname;
            txt += StringToText("<n/>");

            txt += (
                StringToText("Buttons pushed = ") +
                IntToText(rec_result_arr[IBE_MENU_RANK_GR_RECORD_BUTTONS].player_values[i])
            );
            txt += StringToText("<n/>");

            txt += (
                StringToText("Revives with throw essence = ") +
                IntToText(rec_result_arr[IBE_MENU_RANK_GR_RECORD_REV_ESSENCE].player_values[i])
            );
            txt += StringToText("<n/>");

            txt += (
                StringToText("Revives with ART = ") +
                IntToText(rec_result_arr[IBE_MENU_RANK_GR_RECORD_REV_ART].player_values[i])
            );
            txt += StringToText("<n/>");
        }
    }
    else if (col == 6) {
        for (i = 0; i < IBE_STAT_CHALLENGE_MAX; i += 1) {
            if (!gres.challenges[i].completed_by) { continue; }
            if (!first) {
                txt += StringToText("<n/>");
            }
            first = false;
            txt += StringToText(sf_string_width_space(IntToString(i), 2) + ". ");
            txt += sf_format_time(gres.challenges[i].time);
            txt += StringToText(" by ") + gres.players[gres.challenges[i].completed_by].tname;
        }
    }
    else {
        return null;
    }

    return txt;
}

int ibe_menu_rank_gr_cell_sort_value(int idx, int col)
{
    int i;
    int tmp;
    structref<ibe_stat_gresult_t> gres;

    gres = ibe_stat_grl_list[idx];

    if (col == 6) {
        if (gres.escape_time == 0.0) {
            for (i = 0; i < IBE_STAT_CHALLENGE_MAX; i += 1) {
                if (gres.challenges[i].completed_by == 0) { continue; }
                tmp += 1;
            }
            return 0x7fffffff - tmp;
        }
        else {
            return ibe_ui_dg_fixed_to_sort(gres.escape_time);
        }
    }

    return 0;
}

void ibe_menu_rank_gr_init(structref<ibe_menu_rank_sect_t> rank_sect)
{
    ibe_ui_dg_set_handlers(
        rank_sect.dg,
        ibe_menu_rank_gr_row_count,
        ibe_menu_rank_gr_cell_text,
        ibe_menu_rank_gr_cell_tooltip,
        ibe_menu_rank_gr_cell_sort_value,
        TriggerCreate("ibe_menu_rank_gr_on_btn_sort")
    );
    ibe_ui_dg_column_add(rank_sect.dg, StringToText("No."), false);
    ibe_ui_dg_column_set_size(rank_sect.dg, IBE_UI_DG_COL_LAST_CREATED, 0.5, -1, -1);
    ibe_ui_dg_column_add(rank_sect.dg, StringToText("Players"), false);
    ibe_ui_dg_column_set_size(rank_sect.dg, IBE_UI_DG_COL_LAST_CREATED, 1.9, -1, -1);
    ibe_ui_dg_column_add(rank_sect.dg, StringToText("Difficulty"), false);
    ibe_ui_dg_column_set_size(rank_sect.dg, IBE_UI_DG_COL_LAST_CREATED, 0.7, -1, -1);
    ibe_ui_dg_column_add(rank_sect.dg, StringToText("Game speed"), false);
    ibe_ui_dg_column_set_size(rank_sect.dg, IBE_UI_DG_COL_LAST_CREATED, 0.7, -1, -1);
    ibe_ui_dg_column_add(rank_sect.dg, StringToText("MVP"), false);
    ibe_ui_dg_column_add(rank_sect.dg, StringToText("Support"), false);
    ibe_ui_dg_column_add(rank_sect.dg, StringToText("Escape time"), true);
    ibe_ui_dg_column_set_default_sort(rank_sect.dg, IBE_UI_DG_COL_LAST_CREATED, true);
}

bool ibe_menu_rank_gr_on_btn_sort(bool test_conds, bool run_actions)
{
    ibe_ui_dg_handle_ui_event(ibe_menu_rank_sections[IBE_MENU_RANK_SECTION_ESCAPES].dg);

    return true;
}
