int[MAX_PLAYERS + 1] ibe_meni_ov_map_idx;
ibe_menu_rank_sect_t ibe_menu_ov_players;

int ibe_menu_ov_row_count()
{
    int i;
    int count = 0;

    for (i = 1; i <= MAX_PLAYERS; i += 1) {
        if (!gm_players[i].active) { continue; }
        ibe_meni_ov_map_idx[count] = i;
        count += 1;
    }

    return count;
}

text ibe_menu_ov_cell_text(int idx, int col, int row)
{
    int i;
    int player;
    text txt = StringToText("");

    player = ibe_meni_ov_map_idx[idx];

    if (col == 0) {
        txt = StringToText(IntToString(row + 1) + ".");
    }
    else if (col == 1) {
        txt = sf_player_name_colored(player);
        if (!gm_players[player].ingame) {
            txt += StringToText(" <c val=\"999999\">(left)</c>");
        }
    }
    else if (col == 2) {
        txt = IntToText(UnitLevel(gm_players[player].hero.mainUnit));
    }
    else if (col == 3) {
        txt = IntToText(sf_stat_session_stats[player].revives);
    }
    else if (col == 4) {
        txt = IntToText(sf_stat_session_stats[player].deaths);
    }
    else if (col == 5) {
        txt = IntToText(sf_stat_session_stats[player].challenges_completed);
    }
    else if (col == 6) {
        if (UnitIsAlive(gm_players[player].hero.mainUnit)) {
            txt = StringToText("<c val=\"00ff00\">Alive</c>");
        }
        else {
            txt = StringToText("<c val=\"ff0000\">Dead</c>");
        }
    }

    return txt;
}

text ibe_menu_ov_cell_tooltip(int idx, int col, int row)
{
    int player;
    text txt = StringToText("");

    player = ibe_meni_ov_map_idx[idx];

    return txt;
}

int ibe_menu_ov_cell_sort_value(int idx, int col)
{
    int player;

    player = ibe_meni_ov_map_idx[idx];

    if (col == 1) {
        return player;
    }
    else if (col == 2) {
        return UnitLevel(gm_players[player].hero.mainUnit);
    }
    else if (col == 3) {
        return sf_stat_session_stats[player].revives;
    }
    else if (col == 4) {
        return sf_stat_session_stats[player].deaths;
    }
    else if (col == 5) {
        return sf_stat_session_stats[player].challenges_completed;
    }
    else if (col == 6) {
        if (UnitIsAlive(gm_players[player].hero.mainUnit)) {
            return 1;
        }
        else {
            return 0;
        }
    }

    return 0;
}

void ibe_menu_ov_init()
{
    int header_panel;
    // challenge info
    header_panel = DialogControlHookup(
        ibe_menu_overview_panel,
        c_triggerControlTypePanel,
        "HeaderFrame"
    );
    ibe_menu_ov_challenge_title = DialogControlHookup(
        header_panel,
        c_triggerControlTypeLabel,
        "CurrentChallengeTitle"
    );
    ibe_menu_ov_challenge_desc = DialogControlHookup(
        header_panel,
        c_triggerControlTypeLabel,
        "CurrentChallengeDesc"
    );

    // players list
    ibe_menu_ov_players.panel = DialogControlCreateInPanelFromTemplate(
        ibe_menu_overview_panel,
        c_triggerControlTypePanel,
        "IBE_Ranking/Table"
    );
    DialogControlSetPositionRelative(
        ibe_menu_ov_players.panel,
        PlayerGroupAll(),
        c_anchorTopLeft,
        ibe_menu_overview_panel,
        c_anchorTopLeft,
        30, 220
    );
    ibe_menu_ov_players.table = DialogControlHookup(ibe_menu_ov_players.panel, c_triggerControlTypePanel, "Inner");
    ibe_ui_dg_create(ibe_menu_ov_players.dg);
    ibe_ui_dg_set_handlers(
        ibe_menu_ov_players.dg,
        ibe_menu_ov_row_count,
        ibe_menu_ov_cell_text,
        ibe_menu_ov_cell_tooltip,
        ibe_menu_ov_cell_sort_value,
        TriggerCreate("ibe_menu_ov_on_btn_sort")
    );
    ibe_ui_dg_column_add(ibe_menu_ov_players.dg, StringToText("No."), false);
    ibe_ui_dg_column_set_size(ibe_menu_ov_players.dg, IBE_UI_DG_COL_LAST_CREATED, 0.5, -1, -1);
    ibe_ui_dg_column_add(ibe_menu_ov_players.dg, StringToText("Player"), true);
    ibe_ui_dg_column_set_size(ibe_menu_ov_players.dg, IBE_UI_DG_COL_LAST_CREATED, 1.5 + (0.15 * 5) - 0.2, -1, -1);
    ibe_ui_dg_column_add(ibe_menu_ov_players.dg, StringToText("Level"), true);
    ibe_ui_dg_column_set_size(ibe_menu_ov_players.dg, IBE_UI_DG_COL_LAST_CREATED, 0.85, -1, -1);
    ibe_ui_dg_column_set_default_sort(ibe_menu_ov_players.dg, IBE_UI_DG_COL_LAST_CREATED, false);
    ibe_ui_dg_column_add(ibe_menu_ov_players.dg, StringToText("Revives"), true);
    ibe_ui_dg_column_set_size(ibe_menu_ov_players.dg, IBE_UI_DG_COL_LAST_CREATED, 0.85, -1, -1);
    ibe_ui_dg_column_add(ibe_menu_ov_players.dg, StringToText("Deaths"), true);
    ibe_ui_dg_column_set_size(ibe_menu_ov_players.dg, IBE_UI_DG_COL_LAST_CREATED, 0.85, -1, -1);
    ibe_ui_dg_column_add(ibe_menu_ov_players.dg, StringToText("Challenges completed"), true);
    ibe_ui_dg_column_set_size(ibe_menu_ov_players.dg, IBE_UI_DG_COL_LAST_CREATED, 0.85, -1, -1);
    ibe_ui_dg_column_add(ibe_menu_ov_players.dg, StringToText("Status"), true);
    ibe_ui_dg_column_set_size(ibe_menu_ov_players.dg, IBE_UI_DG_COL_LAST_CREATED, 0.85, -1, -1);
    ibe_ui_dg_column_add(ibe_menu_ov_players.dg, StringToText("Action"), false);
    ibe_ui_dg_column_set_size(ibe_menu_ov_players.dg, IBE_UI_DG_COL_LAST_CREATED, 1.2, -1, -1);
    ibe_ui_dg_view_generate(
        ibe_menu_ov_players.dg,
        ibe_menu_ov_players.table,
        IBE_MENU_PANEL_WIDTH - 60 - 20,
        IBE_MENU_PANEL_HEIGHT - 220 - 30 - 20
    );
}

void ibe_menu_ov_refresh(int player)
{
    text title;
    text desc;

    if (lv_current != -1) {
        title = StringToText(IntToString(lv_current) + ". " + lv_info[lv_current].name);
        desc = lv_info[lv_current].description;
    }
    else {
        title = StringToText("");
        desc = StringToText("");
    }

    DialogControlSetPropertyAsText(
        ibe_menu_ov_challenge_title,
        c_triggerControlPropertyText,
        PlayerGroupAll(),
        title
    );
    DialogControlSetPropertyAsText(
        ibe_menu_ov_challenge_desc,
        c_triggerControlPropertyText,
        PlayerGroupAll(),
        desc
    );

    ibe_ui_dg_view_redraw(ibe_menu_ov_players.dg, player);
}

bool ibe_menu_ov_on_btn_sort(bool test_conds, bool run_actions)
{
    ibe_ui_dg_handle_ui_event(ibe_menu_ov_players.dg);

    return true;
}
