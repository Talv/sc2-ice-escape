static void profile_save_to_stream(structref<db_stream_t> stream, structref<ibe_stat_profile_t> prof)
{
    int i;
    int l;

    db_stream_push_int(stream, prof.deaths);
    db_stream_push_int(stream, prof.revives);
    db_stream_push_int(stream, prof.games_started);

    for (i = 0; i < IBE_GM_MAX; i += 1) {
        db_stream_push_fixed(stream, prof.gm[i].escape_best_time);
        db_stream_push_int(stream, prof.gm[i].time_played);
        db_stream_push_int(stream, prof.gm[i].games_played);
        db_stream_push_int(stream, prof.gm[i].games_completed);

        for (l = 0; l < IBE_STAT_CHALLENGE_MAX; l += 1) {
            db_stream_push_fixed(stream, prof.gm[i].chal[l].best_time);
            db_stream_push_int(stream, prof.gm[i].chal[l].completions);
            db_stream_push_int(stream, prof.gm[i].chal[l].powerups);
            db_stream_push_int(stream, prof.gm[i].chal[l].buttons);
        }
    }

    for (i = 0; i < IBE_STAT_ABIL_MAX; i += 1) {
        db_stream_push_int(stream, prof.abils[i]);
    }
}

static void profile_load_from_stream(structref<db_stream_t> stream, structref<ibe_stat_profile_t> prof)
{
    int i;
    int l;

    prof.deaths = db_stream_pop_int(stream);
    prof.revives = db_stream_pop_int(stream);
    prof.games_started = db_stream_pop_int(stream);

    for (i = 0; i < IBE_GM_MAX; i += 1) {
        prof.gm[i].escape_best_time = db_stream_pop_fixed(stream);
        prof.gm[i].time_played = db_stream_pop_int(stream);
        prof.gm[i].games_played = db_stream_pop_int(stream);
        prof.gm[i].games_completed = db_stream_pop_int(stream);

        for (l = 0; l < IBE_STAT_CHALLENGE_MAX; l += 1) {
            prof.gm[i].chal[l].best_time = db_stream_pop_fixed(stream);
            prof.gm[i].chal[l].completions = db_stream_pop_int(stream);
            prof.gm[i].chal[l].powerups = db_stream_pop_int(stream);
            prof.gm[i].chal[l].buttons = db_stream_pop_int(stream);
        }
    }

    for (i = 0; i < IBE_STAT_ABIL_MAX; i += 1) {
        prof.abils[i] = db_stream_pop_int(stream);
    }
}


bool ibe_stat_profile_storage_migrate(structref<db_stream_t> stream, int from_ver)
{
    int i;
    int l;
    ibe_stat_profile_t prof;

    if (from_ver <= 2) {
        return false;
    }

    // broken fixed value serializing - overflow above ~128.0
    if (from_ver <= 3) {
        profile_load_from_stream(stream, prof);

        for (i = 0; i < IBE_GM_MAX; i += 1) {
            prof.gm[i].escape_best_time = 0.0;

            for (l = 0; l < IBE_STAT_CHALLENGE_MAX; l += 1) {
                if (prof.gm[i].chal[l].best_time >= 524287) {
                    prof.gm[i].chal[l].best_time = 0;
                    prof.gm[i].chal[l].completions = 0;
                }
                else {
                    prof.gm[i].chal[l].best_time /= 4096.0;
                }
            }
        }

        db_stream_init(stream);
        profile_save_to_stream(stream, prof);
    }

    // negative times?
    if (from_ver <= 5) {
        profile_load_from_stream(stream, prof);

        for (i = 0; i < IBE_GM_MAX; i += 1) {
            for (l = 0; l < IBE_STAT_CHALLENGE_MAX; l += 1) {
                if (prof.gm[i].chal[l].best_time < 0) {
                    prof.gm[i].chal[l].best_time = 0;
                    prof.gm[i].chal[l].completions = 0;
                }
            }
        }

        db_stream_init(stream);
        profile_save_to_stream(stream, prof);
    }

    // erase records from normal - speedy
    if (from_ver <= 6) {
        profile_load_from_stream(stream, prof);

        for (l = 0; l < IBE_STAT_CHALLENGE_MAX; l += 1) {
            prof.gm[2].chal[l].best_time = 0;
            prof.gm[2].chal[l].completions = 0;
        }

        db_stream_init(stream);
        profile_save_to_stream(stream, prof);
    }

    return true;
}

bool ibe_stat_profile_load(int player)
{
    int version;
    string buff;
    db_stream_t stream;
    int tmp;

    ibe_stat_profiles[player].storage = BankLoad(ibe_stat_bank_name, player);

    if (!BankSectionExists(ibe_stat_profiles[player].storage, "profile")) {
        ibe_stat_profile_save(player);
    }
    else {
        db_stream_init(stream);

        buff = ibe_stat_bk_get_value_str(ibe_stat_profiles[player].storage, "profile", "d");
        tmp = db_crypt_validate(buff);
        if (tmp != 0) {
            if (tmp == DB_CRYPT_ERR_CHECKSUM_MISSMATCH) {
                UIDisplayMessage(PlayerGroupSingle(player), c_messageAreaSubtitle, StringToText("Profile data couldn't be loaded - checksum missmatch"));
            }
            else {
                Dbg("[profile/load] bank reset");
                ibe_stat_profile_save(player);
            }
            return false;
        }

        stream.buff = db_crypt_decrypt(ibe_stat_player_encryption_key(player), buff);

        version = BankValueGetAsInt(ibe_stat_profiles[player].storage, "profile", "v");
        if (version < IBE_STAT_PROFILE_CURRENT_VERSION) {
            if (!ibe_stat_profile_storage_migrate(stream, version)) {
                ibe_stat_profile_save(player);
                return false;
            }
            else {
            }
        }

        profile_load_from_stream(stream, ibe_stat_profiles[player]);
    }

    return true;
}

void ibe_stat_profile_save(int player)
{
    db_stream_t stream;
    string buff;

    db_stream_init(stream);

    if (!BankSectionExists(ibe_stat_profiles[player].storage, "profile")) {
        BankSectionCreate(ibe_stat_profiles[player].storage, "profile");
    }

    profile_save_to_stream(stream, ibe_stat_profiles[player]);
    buff = db_crypt_encrypt(ibe_stat_player_encryption_key(player), stream.buff);
    ibe_stat_bk_set_value_str(ibe_stat_profiles[player].storage, "profile", "d", buff);
    BankValueSetFromInt(ibe_stat_profiles[player].storage, "profile", "v", IBE_STAT_PROFILE_CURRENT_VERSION);
    BankSave(ibe_stat_profiles[player].storage);
}
